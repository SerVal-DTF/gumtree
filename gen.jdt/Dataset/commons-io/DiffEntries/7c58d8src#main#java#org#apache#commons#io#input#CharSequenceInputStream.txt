Previous File: OUTPUT/commons-io/prevFiles/prev_7c58d8src#main#java#org#apache#commons#io#input#CharSequenceInputStream.java
Revised File: OUTPUT/commons-io/revFiles/7c58d8src#main#java#org#apache#commons#io#input#CharSequenceInputStream.java
DiffEntry: @@ -68,3 +68,4 @@
         if (bufferSize < maxBytesPerChar) {
-            throw new IllegalArgumentException("Buffer size " + bufferSize + " is less than maxBytesPerChar " + maxBytesPerChar);
+            throw new IllegalArgumentException("Buffer size " + bufferSize + " is less than maxBytesPerChar " +
+                    maxBytesPerChar);
         }

@@ -235,5 +236,6 @@
          * It should be possible to apply some optimisations however:
-         * + use mark/reset on the cbuf and bbuf. This would only work if the buffer had not been (re)filled since the mark.
-         * The code would have to catch InvalidMarkException - does not seem possible to check if mark is valid otherwise.
-         * + Try saving the state of the cbuf before each fillBuffer; it might be possible to restart from there.
+         * + use mark/reset on the cbuf and bbuf. This would only work if the buffer had not been (re)filled since
+         * the mark. The code would have to catch InvalidMarkException - does not seem possible to check if mark is
+         * valid otherwise. + Try saving the state of the cbuf before each fillBuffer; it might be possible to
+         * restart from there.
          */

@@ -253,3 +255,4 @@
             if (this.cbuf.position() != this.mark_cbuf) {
-                throw new IllegalStateException("Unexpected CharBuffer postion: actual="+cbuf.position() + " expected=" + this.mark_cbuf);
+                throw new IllegalStateException("Unexpected CharBuffer postion: actual=" + cbuf.position() + " " +
+                        "expected=" + this.mark_cbuf);
             }

