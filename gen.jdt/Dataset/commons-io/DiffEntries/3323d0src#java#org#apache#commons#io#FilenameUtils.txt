Previous File: OUTPUT/commons-io/prevFiles/prev_3323d0src#java#org#apache#commons#io#FilenameUtils.java
Revised File: OUTPUT/commons-io/revFiles/3323d0src#java#org#apache#commons#io#FilenameUtils.java
DiffEntry: @@ -18,5 +18,4 @@
 import java.io.File;
-import java.io.IOException;
-import java.util.Collection;
 import java.util.ArrayList;
+import java.util.Collection;
 

@@ -53,3 +52,3 @@
  * @author Stephen Colebourne
- * @version $Id: FilenameUtils.java,v 1.28 2004/11/26 19:18:28 martinc Exp $
+ * @version $Id: FilenameUtils.java,v 1.29 2004/11/27 01:22:05 scolebourne Exp $
  * @since Commons IO 1.1

@@ -114,4 +113,5 @@
      * <p>
-     * A double slash will be merged to a single slash (thus UNC names are not handled).
-     * A single dot path segment will be removed with no other effect.
+     * A trailing slash will be removed.
+     * A double slash will be merged to a single slash (but UNC names are handled).
+     * A single dot path segment will be removed.
      * A double dot will cause that path segment and the one before to be removed.

@@ -120,12 +120,18 @@
      * <pre>
-     * /foo//               -->     /foo/
-     * /foo/./              -->     /foo/
-     * /foo/../bar          -->     /bar
-     * /foo/../bar/         -->     /bar/
-     * /foo/../bar/../baz   -->     /baz
-     * //foo//./bar         -->     /foo/bar
-     * /../                 -->     null
-     * ../foo               -->     null
-     * foo/../../bar        -->     null
-     * foo/../bar           -->     bar
+     * /foo//               -->   /foo
+     * /foo/./              -->   /foo
+     * /foo/../bar          -->   /bar
+     * /foo/../bar/         -->   /bar
+     * /foo/../bar/../baz   -->   /baz
+     * //foo//./bar         -->   /foo/bar
+     * /../                 -->   null
+     * ../foo               -->   null
+     * foo/../../bar        -->   null
+     * foo/../bar           -->   bar
+     * //server/foo/../bar  -->   //server/bar
+     * //server/../bar      -->   null
+     * C:\foo\..\bar        -->   C:\bar
+     * C:\..\bar            -->   null
+     * ~/foo/../bar         -->   ~/bar
+     * ~/../bar             -->   null
      * </pre>

@@ -139,3 +145,6 @@
         }
-        char[] array = filename.toCharArray();
+        int size = filename.length();
+        if (size == 0) {
+            return filename;
+        }
         int prefix = getPrefixLength(filename);

@@ -145,6 +154,6 @@
         
-        // TODO: Use prefix
+        char[] array = new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy
+        filename.getChars(0, filename.length(), array, 0);
         
-        int size = array.length;
-        // fix separators
+        // fix separators throughout
         for (int i = 0; i < array.length; i++) {

@@ -154,4 +163,8 @@
         }
+        if (isSeparator(array[size - 1]) == false) {
+            array[size++] = SYSTEM_SEPARATOR;
+        }
+        
         // adjoining slashes
-        for (int i = 1; i < size; i++) {
+        for (int i = prefix + 1; i < size; i++) {
             if (array[i] == SYSTEM_SEPARATOR && array[i - 1] == SYSTEM_SEPARATOR) {

@@ -163,6 +176,6 @@
         // dot slash
-        for (int i = 2; i < size; i++) {
+        for (int i = prefix + 1; i < size; i++) {
             if (array[i] == SYSTEM_SEPARATOR && array[i - 1] == '.' &&
-                    array[i - 2] == SYSTEM_SEPARATOR) {
-                System.arraycopy(array, i, array, i - 2, size - i);
+                    (i == prefix + 1 || array[i - 2] == SYSTEM_SEPARATOR)) {
+                System.arraycopy(array, i + 1, array, i - 1, size - i);
                 size -=2;

@@ -173,6 +186,6 @@
         outer:
-        for (int i = 2; i < size; i++) {
-            if (array[i] == SYSTEM_SEPARATOR && array[i - 1] == '.' &&
-                    array[i - 2] == '.' && (i == 2 || array[i - 3] == SYSTEM_SEPARATOR)) {
-                if (i == 2) {
+        for (int i = prefix + 2; i < size; i++) {
+            if (array[i] == SYSTEM_SEPARATOR && array[i - 1] == '.' && array[i - 2] == '.' &&
+                    (i == prefix + 2 || array[i - 3] == SYSTEM_SEPARATOR)) {
+                if (i == prefix + 2) {
                     return null;

@@ -180,5 +193,5 @@
                 int j;
-                for (j = i - 4 ; j >= 0; j--) {
+                for (j = i - 4 ; j >= prefix; j--) {
                     if (array[j] == SYSTEM_SEPARATOR) {
-                        System.arraycopy(array, i, array, j, size - i);
+                        System.arraycopy(array, i + 1, array, j + 1, size - i);
                         size -= (i - j);

@@ -188,5 +201,5 @@
                 }
-                System.arraycopy(array, i + 1, array, 0, size - i - 1);
-                size -= (i + 1);
-                i = 1;
+                System.arraycopy(array, i + 1, array, prefix, size - i);
+                size -= (i + 1 - prefix);
+                i = prefix + 1;
             }

@@ -194,3 +207,9 @@
         
-        return new String(array, 0, size);
+        if (size <= 0) {  // should never be less than 0
+            return "";
+        }
+        if (size <= prefix) {  // should never be less than prefix
+            return new String(array, 0, size);
+        }
+        return new String(array, 0, size - 1);
     }

@@ -241,75 +260,2 @@
                 append(File.separator).append(pth).toString();
-    }
-
-    /**
-     * Resolve a file <code>filename</code> to it's canonical form. If
-     * <code>filename</code> is relative (doesn't start with <code>/</code>),
-     * it will be resolved relative to <code>baseFile</code>, otherwise it is
-     * treated as a normal root-relative path.
-     *
-     * @param baseFile Where to resolve <code>filename</code> from, if
-     * <code>filename</code> is relative.
-     * @param filename Absolute or relative file path to resolve.
-     * @return The canonical <code>File</code> of <code>filename</code>.
-     */
-     // KILL? Decide whether this is worth keeping?
-    public static File resolveFile(File baseFile, String filename) {
-        String filenm = filename;
-        if ('/' != File.separatorChar) {
-            filenm = filename.replace('/', File.separatorChar);
-        }
-
-        if ('\\' != File.separatorChar) {
-            filenm = filename.replace('\\', File.separatorChar);
-        }
-
-        // deal with absolute files
-        if (filenm.startsWith(File.separator)) {
-            File file = new File(filenm);
-
-            try {
-                file = file.getCanonicalFile();
-            } catch (IOException ioe) {
-                // ignore
-            }
-
-            return file;
-        }
-        // FIXME: I'm almost certain this // removal is unnecessary, as
-        // getAbsoluteFile() strips
-        // them. However, I'm not sure about this UNC stuff. (JT)
-        char[] chars = filename.toCharArray();
-        StringBuffer sb = new StringBuffer();
-
-        //remove duplicate file separators in succession - except
-        //on win32 at start of filename as UNC filenames can
-        //be \\AComputer\AShare\myfile.txt
-        int start = 0;
-        if ('\\' == File.separatorChar) {
-            sb.append(filenm.charAt(0));
-            start++;
-        }
-
-        for (int i = start; i < chars.length; i++) {
-            boolean doubleSeparator =
-                File.separatorChar == chars[i]
-                    && File.separatorChar == chars[i - 1];
-
-            if (!doubleSeparator) {
-                sb.append(chars[i]);
-            }
-        }
-
-        filenm = sb.toString();
-
-        //must be relative
-        File file = (new File(baseFile, filenm)).getAbsoluteFile();
-
-        try {
-            file = file.getCanonicalFile();
-        } catch ( IOException ioe) {
-            ;
-        }
-
-        return file;
     }

@@ -379,2 +325,4 @@
      * </pre>
+     * Both sets of prefixes will be matched regardless of the system
+     * on which the code runs.
      * 

@@ -391,33 +339,10 @@
         }
-        if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {
-            char ch0 = filename.charAt(0);
-            if (len == 1) {
-                return (isSeparator(ch0) ? 1 : 0);
-            } else {
-                char ch1 = filename.charAt(1);
-                if (ch1 == ':') {
-                    ch0 = Character.toUpperCase(ch0);
-                    if (ch0 < 'A' || ch0 > 'Z' || len == 2 || isSeparator(filename.charAt(2)) == false) {
-                        return -1;
-                    }
-                    return 3;
-                } else if (isSeparator(ch0) && isSeparator(ch1)) {
-                    int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);
-                    int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);
-                    if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {
-                        return -1;
-                    }
-                    posUnix = (posUnix == -1 ? posWin : posUnix);
-                    posWin = (posWin == -1 ? posUnix : posWin);
-                    return Math.min(posUnix, posWin) + 1;
-                } else {
-                    return (isSeparator(ch0) ? 1 : 0);
-                }
+        char ch0 = filename.charAt(0);
+        if (len == 1) {
+            if (ch0 == '~' || ch0 == ':') {
+                return -1;
             }
+            return (isSeparator(ch0) ? 1 : 0);
         } else {
-            char ch0 = filename.charAt(0);
             if (ch0 == '~') {
-                if (len == 1) {
-                    return -1;
-                }
                 int posUnix = filename.indexOf(UNIX_SEPARATOR, 1);

@@ -425,2 +350,20 @@
                 if (posUnix == -1 && posWin == -1) {
+                    return -1;
+                }
+                posUnix = (posUnix == -1 ? posWin : posUnix);
+                posWin = (posWin == -1 ? posUnix : posWin);
+                return Math.min(posUnix, posWin) + 1;
+            }
+            char ch1 = filename.charAt(1);
+            if (ch1 == ':') {
+                ch0 = Character.toUpperCase(ch0);
+                if (ch0 < 'A' || ch0 > 'Z' || len == 2 || isSeparator(filename.charAt(2)) == false) {
+                    return -1;
+                }
+                return 3;
+                
+            } else if (isSeparator(ch0) && isSeparator(ch1)) {
+                int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);
+                int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);
+                if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {
                     return -1;

@@ -515,6 +458,7 @@
      * <pre>
-     * ~/a/b/c.txt --> a/b
-     * a.txt       --> ""
-     * a/b/c       --> a/b
-     * a/b/c/      --> a/b/c
+     * C:\a\b\c.txt --> a\b
+     * ~/a/b/c.txt  --> a/b
+     * a.txt        --> ""
+     * a/b/c        --> a/b
+     * a/b/c/       --> a/b/c
      * </pre>

@@ -546,6 +490,7 @@
      * <pre>
-     * ~/a/b/c.txt --> ~/a/b
-     * a.txt       --> ""
-     * a/b/c       --> a/b
-     * a/b/c/      --> a/b/c
+     * C:\a\b\c.txt --> C:\a\b
+     * ~/a/b/c.txt  --> ~/a/b
+     * a.txt        --> ""
+     * a/b/c        --> a/b
+     * a/b/c/       --> a/b/c
      * </pre>

