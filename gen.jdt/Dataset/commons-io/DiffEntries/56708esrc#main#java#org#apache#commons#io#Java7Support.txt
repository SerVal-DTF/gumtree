Previous File: OUTPUT/commons-io/prevFiles/prev_56708esrc#main#java#org#apache#commons#io#Java7Support.java
Revised File: OUTPUT/commons-io/revFiles/56708esrc#main#java#org#apache#commons#io#Java7Support.java
DiffEntry: @@ -29,7 +29,6 @@
  * Java7 feature detection and reflection based feature access.
- *
+ * <p/>
  * Taken from maven-shared-utils, only for private usage until we go full java7
  */
-class Java7Support
-{
+class Java7Support {
 

@@ -55,30 +54,23 @@
 
-    static
-    {
+    static {
         boolean isJava7x = true;
-        try
-        {
+        try {
             ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            Class<?> files = cl.loadClass( "java.nio.file.Files" );
-            Class<?> path = cl.loadClass( "java.nio.file.Path" );
-            Class<?> fa = cl.loadClass( "java.nio.file.attribute.FileAttribute" );
-            Class<?> linkOption = cl.loadClass( "java.nio.file.LinkOption" );
-            isSymbolicLink = files.getMethod( "isSymbolicLink", path );
-            delete = files.getMethod( "delete", path );
-            readSymlink = files.getMethod( "readSymbolicLink", path );
+            Class<?> files = cl.loadClass("java.nio.file.Files");
+            Class<?> path = cl.loadClass("java.nio.file.Path");
+            Class<?> fa = cl.loadClass("java.nio.file.attribute.FileAttribute");
+            Class<?> linkOption = cl.loadClass("java.nio.file.LinkOption");
+            isSymbolicLink = files.getMethod("isSymbolicLink", path);
+            delete = files.getMethod("delete", path);
+            readSymlink = files.getMethod("readSymbolicLink", path);
 
-            emptyFileAttributes = Array.newInstance( fa, 0 );
-            final Object o = emptyFileAttributes;
-            createSymlink = files.getMethod( "createSymbolicLink", path, path, o.getClass() );
-            emptyLinkOpts = Array.newInstance( linkOption, 0 );
-            exists = files.getMethod( "exists", path, emptyLinkOpts.getClass() );
-            toPath = File.class.getMethod( "toPath" );
-            toFile = path.getMethod( "toFile" );
-        }
-        catch ( ClassNotFoundException e )
-        {
+            emptyFileAttributes = Array.newInstance(fa, 0);
+            createSymlink = files.getMethod("createSymbolicLink", path, path, emptyFileAttributes.getClass());
+            emptyLinkOpts = Array.newInstance(linkOption, 0);
+            exists = files.getMethod("exists", path, emptyLinkOpts.getClass());
+            toPath = File.class.getMethod("toPath");
+            toFile = path.getMethod("toFile");
+        } catch (ClassNotFoundException e) {
             isJava7x = false;
-        }
-        catch ( NoSuchMethodException e )
-        {
+        } catch (NoSuchMethodException e) {
             isJava7x = false;

@@ -88,16 +80,10 @@
 
-    public static boolean isSymLink( File file )
-    {
-        try
-        {
-            Object path = toPath.invoke( file );
-            return (Boolean) isSymbolicLink.invoke( null, path );
-        }
-        catch ( IllegalAccessException e )
-        {
-            throw new RuntimeException( e );
-        }
-        catch ( InvocationTargetException e )
-        {
-            throw new RuntimeException( e );
+    public static boolean isSymLink(File file) {
+        try {
+            Object path = toPath.invoke(file);
+            return (Boolean) isSymbolicLink.invoke(null, path);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
+            throw new RuntimeException(e);
         }

@@ -106,18 +92,12 @@
 
-    public static File readSymbolicLink( File symlink )
-        throws IOException
-    {
-        try
-        {
-            Object path = toPath.invoke( symlink );
-            Object resultPath =  readSymlink.invoke( null, path );
-            return (File) toFile.invoke( resultPath );
-        }
-        catch ( IllegalAccessException e )
-        {
-            throw new RuntimeException( e );
-        }
-        catch ( InvocationTargetException e )
-        {
-            throw new RuntimeException( e );
+    public static File readSymbolicLink(File symlink)
+            throws IOException {
+        try {
+            Object path = toPath.invoke(symlink);
+            Object resultPath = readSymlink.invoke(null, path);
+            return (File) toFile.invoke(resultPath);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
+            throw new RuntimeException(e);
         }

@@ -126,17 +106,11 @@
 
-    public static boolean exists( File file )
-        throws IOException
-    {
-        try
-        {
-            Object path = toPath.invoke( file );
-            final Object invoke = exists.invoke( null, path, emptyLinkOpts );
+    public static boolean exists(File file)
+            throws IOException {
+        try {
+            Object path = toPath.invoke(file);
+            final Object invoke = exists.invoke(null, path, emptyLinkOpts);
             return (Boolean) invoke;
-        }
-        catch ( IllegalAccessException e )
-        {
-            throw new RuntimeException( e );
-        }
-        catch ( InvocationTargetException e )
-        {
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
             throw (RuntimeException) e.getTargetException();

@@ -146,21 +120,14 @@
 
-    public static File createSymbolicLink( File symlink, File target )
-        throws IOException
-    {
-        try
-        {
-            if ( !exists( symlink ) )
-            {
-                Object link = toPath.invoke( symlink );
-                Object path = createSymlink.invoke( null, link, toPath.invoke( target ), emptyFileAttributes );
-                return (File) toFile.invoke( path );
+    public static File createSymbolicLink(File symlink, File target)
+            throws IOException {
+        try {
+            if (!exists(symlink)) {
+                Object link = toPath.invoke(symlink);
+                Object path = createSymlink.invoke(null, link, toPath.invoke(target), emptyFileAttributes);
+                return (File) toFile.invoke(path);
             }
             return symlink;
-        }
-        catch ( IllegalAccessException e )
-        {
-            throw new RuntimeException( e );
-        }
-        catch ( InvocationTargetException e )
-        {
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
             final Throwable targetException = e.getTargetException();

@@ -170,4 +137,6 @@
     }
+
     /**
      * Performs a nio delete
+     *
      * @param file the file to delete

@@ -175,16 +144,10 @@
      */
-    public static void delete( File file )
-        throws IOException
-    {
-        try
-        {
-            Object path = toPath.invoke( file );
-            delete.invoke( null, path );
-        }
-        catch ( IllegalAccessException e )
-        {
-            throw new RuntimeException( e );
-        }
-        catch ( InvocationTargetException e )
-        {
+    public static void delete(File file)
+            throws IOException {
+        try {
+            Object path = toPath.invoke(file);
+            delete.invoke(null, path);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
             throw (IOException) e.getTargetException();

@@ -193,4 +156,3 @@
 
-    public static boolean isAtLeastJava7()
-    {
+    public static boolean isAtLeastJava7() {
         return IS_JAVA7;

