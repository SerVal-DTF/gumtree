Previous File: OUTPUT/commons-io/prevFiles/prev_ab4236src#java#org#apache#commons#io#FileSystemUtils.java
Revised File: OUTPUT/commons-io/revFiles/ab4236src#java#org#apache#commons#io#FileSystemUtils.java
DiffEntry: @@ -147,3 +147,3 @@
     public static long freeSpace(String path) throws IOException {
-        return INSTANCE.freeSpaceOS(path, OS, false);
+        return INSTANCE.freeSpaceOS(path, OS, false, -1);
     }

@@ -176,3 +176,32 @@
     public static long freeSpaceKb(String path) throws IOException {
-        return INSTANCE.freeSpaceOS(path, OS, true);
+        return freeSpaceKb(path, -1);
+    }
+    /**
+     * Returns the free space on a drive or volume in kilobytes by invoking
+     * the command line.
+     * <pre>
+     * FileSystemUtils.freeSpaceKb("C:");       // Windows
+     * FileSystemUtils.freeSpaceKb("/volume");  // *nix
+     * </pre>
+     * The free space is calculated via the command line.
+     * It uses 'dir /-c' on Windows, 'df -kP' on AIX/HP-UX and 'df -k' on other Unix.
+     * <p>
+     * In order to work, you must be running Windows, or have a implementation of
+     * Unix df that supports GNU format when passed -k (or -kP). If you are going
+     * to rely on this code, please check that it works on your OS by running
+     * some simple tests to compare the command line with the output from this class.
+     * If your operating system isn't supported, please raise a JIRA call detailing
+     * the exact result from df -k and as much other detail as possible, thanks.
+     *
+     * @param path  the path to get free space for, not null, not empty on Unix
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
+     * @return the amount of free drive space on the drive or volume in kilobytes
+     * @throws IllegalArgumentException if the path is invalid
+     * @throws IllegalStateException if an error occurred in initialisation
+     * @throws IOException if an error occurs when finding the free space
+     * @since Commons IO 2.0
+     */
+    public static long freeSpaceKb(String path, long timeout) throws IOException {
+        return INSTANCE.freeSpaceOS(path, OS, true, timeout);
     }

@@ -191,3 +220,21 @@
     public static long freeSpaceKb() throws IOException {
-        return freeSpaceKb(new File(".").getAbsolutePath()); 
+        return freeSpaceKb(-1); 
+    }
+
+    /**
+     * Returns the disk size of the volume which holds the working directory.
+     * <p>
+     * Identical to:
+     * <pre>
+     * freeSpaceKb(new File(".").getAbsolutePath())
+     * </pre>
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
+     * @return the amount of free drive space on the drive or volume in kilobytes
+     * @throws IllegalStateException if an error occurred in initialisation
+     * @throws IOException if an error occurs when finding the free space
+     * @since Commons IO 2.0
+     */
+    public static long freeSpaceKb(long timeout) throws IOException {
+        return freeSpaceKb(new File(".").getAbsolutePath(), timeout); 
     }

@@ -208,2 +255,4 @@
      * @param kb  whether to normalize to kilobytes
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
      * @return the amount of free drive space on the drive or volume

@@ -213,3 +262,3 @@
      */
-    long freeSpaceOS(String path, int os, boolean kb) throws IOException {
+    long freeSpaceOS(String path, int os, boolean kb, long timeout) throws IOException {
         if (path == null) {

@@ -219,7 +268,7 @@
             case WINDOWS:
-                return (kb ? freeSpaceWindows(path) / 1024 : freeSpaceWindows(path));
+                return (kb ? freeSpaceWindows(path, timeout) / 1024 : freeSpaceWindows(path, timeout));
             case UNIX:
-                return freeSpaceUnix(path, kb, false);
+                return freeSpaceUnix(path, kb, false, timeout);
             case POSIX_UNIX:
-                return freeSpaceUnix(path, kb, true);
+                return freeSpaceUnix(path, kb, true, timeout);
             case OTHER:

@@ -237,2 +286,4 @@
      * @param path  the path to get free space for, including the colon
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
      * @return the amount of free drive space on the drive

@@ -240,3 +291,3 @@
      */
-    long freeSpaceWindows(String path) throws IOException {
+    long freeSpaceWindows(String path, long timeout) throws IOException {
         path = FilenameUtils.normalize(path);

@@ -250,3 +301,3 @@
         // read in the output of the command to an ArrayList
-        List<String> lines = performCommand(cmdAttribs, Integer.MAX_VALUE);
+        List<String> lines = performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);
         

@@ -327,2 +378,4 @@
      * @param posix  whether to use the posix standard format flag
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
      * @return the amount of free drive space on the volume

@@ -330,3 +383,3 @@
      */
-    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
+    long freeSpaceUnix(String path, boolean kb, boolean posix, long timeout) throws IOException {
         if (path.length() == 0) {

@@ -347,3 +400,3 @@
         // perform the command, asking for up to 3 lines (header, interesting, overflow)
-        List<String> lines = performCommand(cmdAttribs, 3);
+        List<String> lines = performCommand(cmdAttribs, 3, timeout);
         if (lines.size() < 2) {

@@ -409,2 +462,4 @@
      * @param max The maximum limit for the lines returned
+     * @param timeout The timout amount in milliseconds or no timeout if the value
+     *  is zero or less
      * @return the parsed data

@@ -412,3 +467,3 @@
      */
-    List<String> performCommand(String[] cmdAttribs, int max) throws IOException {
+    List<String> performCommand(String[] cmdAttribs, int max, long timeout) throws IOException {
         // this method does what it can to avoid the 'Too many open files' error

@@ -428,2 +483,5 @@
         try {
+
+            Thread monitor = ThreadMonitor.start(timeout);
+
             proc = openProcess(cmdAttribs);

@@ -441,2 +499,5 @@
             proc.waitFor();
+
+            ThreadMonitor.stop(monitor);
+
             if (proc.exitValue() != 0) {

