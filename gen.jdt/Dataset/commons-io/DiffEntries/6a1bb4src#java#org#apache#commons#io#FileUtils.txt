Previous File: OUTPUT/commons-io/prevFiles/prev_6a1bb4src#java#org#apache#commons#io#FileUtils.java
Revised File: OUTPUT/commons-io/revFiles/6a1bb4src#java#org#apache#commons#io#FileUtils.java
DiffEntry: @@ -57,2 +57,3 @@
 import java.io.FileInputStream;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

@@ -61,2 +62,3 @@
 import java.net.URL;
+import java.util.Date;
 import java.util.Vector;

@@ -91,3 +93,3 @@
  * Common {@link java.io.File} manipulation routines.
- * 
+ *
  * <h3>Origin of code</h3>

@@ -105,3 +107,4 @@
  * @author <a href="mailto:jefft@apache.org">Jeff Turner</a>
- * @version $Id: FileUtils.java,v 1.13 2003/07/29 13:07:39 jeremias Exp $
+ * @author Matthew Hawthorne
+ * @version $Id: FileUtils.java,v 1.14 2003/08/21 18:40:48 jeremias Exp $
  */

@@ -147,77 +150,3 @@
 
-    /**
-     * Returns the directory path portion of a file specification string.
-     * Matches the equally named unix command.
-     * @param filename filename to inspect
-     * @return The directory portion excluding the ending file separator.
-     * @deprecated use getPath() instead.
-     * TODO DELETE before 1.0
-     */
-    public static String dirname(String filename) {
-        int i = filename.lastIndexOf(File.separator);
-        return (i >= 0 ? filename.substring(0, i) : "");
-    }
 
-    /**
-     * Returns the filename portion of a file specification string.
-     * @param filename filename to inspect
-     * @return The filename string with extension.
-     * @deprecated use removeExtension() instead.
-     * TODO DELETE before 1.0
-     */
-    public static String filename(String filename) {
-        int i = filename.lastIndexOf(File.separator);
-        return (i >= 0 ? filename.substring(i + 1) : filename);
-    }
-
-    /**
-     * Returns the filename portion of a file specification string.
-     * Matches the equally named unix command.
-     * @param filename filename to inspect
-     * @return The filename string without extension.
-     * TODO DELETE before 1.0
-     */
-    public static String basename(String filename) {
-        return basename(filename, extension(filename));
-    }
-
-    /**
-     * Returns the filename portion of a file specification string.
-     * Matches the equally named unix command.
-     * @param filename filename to inspect
-     * @param suffix additional remaining portion of name that if matches will 
-     * be removed
-     * @return The filename string without the suffix.
-     */
-    public static String basename(String filename, String suffix) {
-        int i = filename.lastIndexOf(File.separator) + 1;
-        int lastDot = ((suffix != null) && (suffix.length() > 0))
-                ? filename.lastIndexOf(suffix) : -1;
-
-        if (lastDot >= 0) {
-            return filename.substring(i, lastDot);
-        } else if (i > 0) {
-            return filename.substring(i);
-        } else {
-            return filename; // else returns all (no path and no extension)
-        }
-    }
-
-    /**
-     * Returns the extension portion of a file specification string.
-     * This everything after the last dot '.' in the filename (NOT including
-     * the dot).
-     * @param filename filename to inspect
-     * @return the extension
-     * TODO probably duplicate method. See getExtension
-     */
-    public static String extension(String filename) {
-        int lastDot = filename.lastIndexOf('.');
-
-        if (lastDot >= 0) {
-            return filename.substring(lastDot + 1);
-        } else {
-            return "";
-        }
-    }
 

@@ -240,4 +169,4 @@
      * @throws IOException in case of an I/O error
-     * TODO This method should probably be removed or rethought. 
-     * Because it uses the default encoding only it should probably not be 
+     * TODO This method should probably be removed or rethought.
+     * Because it uses the default encoding only it should probably not be
      * used at all (platform-dependency)

@@ -259,7 +188,8 @@
      * @throws IOException in case of an I/O error
-     * TODO This method should probably be removed or rethought. 
-     * Because it uses the default encoding only it should probably not be 
+     * TODO This method should probably be removed or rethought.
+     * Because it uses the default encoding only it should probably not be
      * used at all (platform-dependency)
      */
-    public static void fileWrite(String fileName, String data) throws IOException {
+    public static void fileWrite(String fileName, String data)
+        throws IOException {
         FileOutputStream out = new FileOutputStream(fileName);

@@ -271,19 +201,4 @@
     }
-    
-    /**
-     * Copy a file. The new file will be created if it does not exist. This is
-     * an inefficient method, which just calls {@link #fileRead(String)} and
-     * then {@link #fileWrite(String,String)}
-     *
-     * @param inFileName the file to copy
-     * @param outFileName the file to copy to
-     * @throws Exception if fileRead or fileWrite throw it
-     * TODO This method is not a good idea. It doesn't do a binary copy. DELETE.
-     */
-    public static void fileCopy(String inFileName, String outFileName) throws
-        Exception
-    {
-        String content = fileRead(inFileName);
-        fileWrite(outFileName, content);
-    }
+
+
 

@@ -320,4 +235,3 @@
                 Thread.sleep(100);
-            } catch (InterruptedException ignore) {
-            } catch (Exception ex) {
+            } catch (InterruptedException ignore) {} catch (Exception ex) {
                 break;

@@ -348,3 +262,5 @@
      */
-    public static String[] getFilesFromExtension(String directory, String[] extensions) {
+    public static String[] getFilesFromExtension(
+        String directory,
+        String[] extensions) {
 

@@ -361,3 +277,6 @@
         for (int i = 0; i < unknownFiles.length; ++i) {
-            String currentFileName = directory + System.getProperty("file.separator") + unknownFiles[i];
+            String currentFileName =
+                directory
+                    + System.getProperty("file.separator")
+                    + unknownFiles[i];
             java.io.File currentFile = new java.io.File(currentFileName);

@@ -365,3 +284,2 @@
             if (currentFile.isDirectory()) {
-
 

@@ -372,3 +290,2 @@
 
-
                 //ok... transverse into this directory and get all the files... then combine

@@ -376,3 +293,4 @@
 
-                String[] fetchFiles = getFilesFromExtension(currentFileName, extensions);
+                String[] fetchFiles =
+                    getFilesFromExtension(currentFileName, extensions);
                 files = blendFilesToVector(files, fetchFiles);

@@ -400,3 +318,2 @@
 
-
     /**

@@ -420,3 +337,2 @@
     private static boolean isValidFile(String file, String[] extensions) {
-
 

@@ -451,3 +367,3 @@
 
-/* *** AVALON CODE *** */
+    /* *** AVALON CODE *** */
 

@@ -461,8 +377,6 @@
      */
-    public static boolean contentEquals( final File file1, final File file2 )
-        throws IOException
-    {
+    public static boolean contentEquals(final File file1, final File file2)
+        throws IOException {
         final boolean file1Exists = file1.exists();
-        if( file1Exists != file2.exists() )
-        {
+        if (file1Exists != file2.exists()) {
             return false;

@@ -470,4 +384,3 @@
 
-        if( !file1Exists )
-        {
+        if (!file1Exists) {
             // two not existing files are equal

@@ -476,4 +389,3 @@
 
-        if( file1.isDirectory() || file2.isDirectory() )
-        {
+        if (file1.isDirectory() || file2.isDirectory()) {
             // don't want to compare directory contents

@@ -484,13 +396,10 @@
         InputStream input2 = null;
-        try
-        {
-            input1 = new FileInputStream( file1 );
-            input2 = new FileInputStream( file2 );
-            return IOUtils.contentEquals( input1, input2 );
+        try {
+            input1 = new FileInputStream(file1);
+            input2 = new FileInputStream(file2);
+            return IOUtils.contentEquals(input1, input2);
 
-        }
-        finally
-        {
-            IOUtils.shutdownStream( input1 );
-            IOUtils.shutdownStream( input2 );
+        } finally {
+            IOUtils.shutdownStream(input1);
+            IOUtils.shutdownStream(input2);
         }

@@ -504,12 +413,9 @@
      */
-    public static File toFile( final URL url )
-    {
-        if( url.getProtocol().equals( "file" ) == false )
-        {
+    public static File toFile(final URL url) {
+        if (url.getProtocol().equals("file") == false) {
             return null;
-        }
-        else
-        {
-            final String filename = url.getFile().replace( '/', File.separatorChar );
-            return new File( filename );
+        } else {
+            final String filename =
+                url.getFile().replace('/', File.separatorChar);
+            return new File(filename);
         }

@@ -524,10 +430,7 @@
      */
-    public static URL[] toURLs( final File[] files )
-        throws IOException
-    {
-        final URL[] urls = new URL[ files.length ];
+    public static URL[] toURLs(final File[] files) throws IOException {
+        final URL[] urls = new URL[files.length];
 
-        for( int i = 0; i < urls.length; i++ )
-        {
-            urls[ i ] = files[ i ].toURL();
+        for (int i = 0; i < urls.length; i++) {
+            urls[i] = files[i].toURL();
         }

@@ -549,13 +452,9 @@
      */
-    public static String removeExtension( final String filename )
-    {
-        final int index = filename.lastIndexOf( '.' );
+    public static String removeExtension(final String filename) {
+        final int index = filename.lastIndexOf('.');
 
-        if( -1 == index )
-        {
+        if (-1 == index) {
             return filename;
-        }
-        else
-        {
-            return filename.substring( 0, index );
+        } else {
+            return filename.substring(0, index);
         }

@@ -575,13 +474,9 @@
      */
-    public static String getExtension( final String filename )
-    {
-        final int index = filename.lastIndexOf( '.' );
+    public static String getExtension(final String filename) {
+        final int index = filename.lastIndexOf('.');
 
-        if( -1 == index )
-        {
+        if (-1 == index) {
             return "";
-        }
-        else
-        {
-            return filename.substring( index + 1 );
+        } else {
+            return filename.substring(index + 1);
         }

@@ -600,5 +495,4 @@
      */
-    public static String removePath( final String filepath )
-    {
-        return removePath( filepath, File.separatorChar );
+    public static String removePath(final String filepath) {
+        return removePath(filepath, File.separatorChar);
     }

@@ -617,13 +511,11 @@
      */
-    public static String removePath( final String filepath, final char fileSeparatorChar )
-    {
-        final int index = filepath.lastIndexOf( fileSeparatorChar );
+    public static String removePath(
+        final String filepath,
+        final char fileSeparatorChar) {
+        final int index = filepath.lastIndexOf(fileSeparatorChar);
 
-        if( -1 == index )
-        {
+        if (-1 == index) {
             return filepath;
-        }
-        else
-        {
-            return filepath.substring( index + 1 );
+        } else {
+            return filepath.substring(index + 1);
         }

@@ -642,5 +534,4 @@
      */
-    public static String getPath( final String filepath )
-    {
-        return getPath( filepath, File.separatorChar );
+    public static String getPath(final String filepath) {
+        return getPath(filepath, File.separatorChar);
     }

@@ -659,14 +550,14 @@
      */
-    public static String getPath( final String filepath, final char fileSeparatorChar )
-    {
-        final int index = filepath.lastIndexOf( fileSeparatorChar );
-        if( -1 == index )
-        {
+    public static String getPath(
+        final String filepath,
+        final char fileSeparatorChar) {
+        final int index = filepath.lastIndexOf(fileSeparatorChar);
+        if (-1 == index) {
             return "";
-        }
-        else
-        {
-            return filepath.substring( 0, index );
+        } else {
+            return filepath.substring(0, index);
         }
     }
+
+
 

@@ -685,33 +576,12 @@
      */
-    public static void copyFileToDirectory( final String source,
-                                            final String destinationDirectory )
-        throws IOException
-    {
-        copyFileToDirectory( new File( source ),
-                             new File( destinationDirectory ) );
-    }
-
-    /**
-     * Copy file from source to destination. If <code>destinationDirectory</code> does not exist, it
-     * (and any parent directories) will be created. If a file <code>source</code> in
-     * <code>destinationDirectory</code> exists, it will be overwritten.
-     *
-     * @param source An existing <code>File</code> to copy.
-     * @param destinationDirectory A directory to copy <code>source</code> into.
-     *
-     * @throws FileNotFoundException if <code>source</code> isn't a normal file.
-     * @throws IllegalArgumentException if <code>destinationDirectory</code> isn't a directory.
-     * @throws IOException if <code>source</code> does not exist, the file in
-     * <code>destinationDirectory</code> cannot be written to, or an IO error occurs during copying.
-     */
-    public static void copyFileToDirectory( final File source,
-                                            final File destinationDirectory )
-        throws IOException
-    {
-        if( destinationDirectory.exists() && !destinationDirectory.isDirectory() )
-        {
-            throw new IllegalArgumentException( "Destination is not a directory" );
+    public static void copyFileToDirectory(
+        final File source,
+        final File destinationDirectory)
+        throws IOException {
+        if (destinationDirectory.exists()
+            && !destinationDirectory.isDirectory()) {
+            throw new IllegalArgumentException("Destination is not a directory");
         }
 
-        copyFile( source, new File( destinationDirectory, source.getName() ) );
+        copyFile(source, new File(destinationDirectory, source.getName()));
     }

@@ -733,10 +603,8 @@
      */
-    public static void copyFile( final File source, final File destination )
-        throws IOException
-    {
+    public static void copyFile(final File source, final File destination)
+        throws IOException {
         //check source exists
-        if( !source.exists() )
-        {
+        if (!source.exists()) {
             final String message = "File " + source + " does not exist";
-            throw new IOException( message );
+            throw new IOException(message);
         }

@@ -744,5 +612,4 @@
         //does destinations directory exist ?
-        if( destination.getParentFile() != null &&
-            !destination.getParentFile().exists() )
-        {
+        if (destination.getParentFile() != null
+            && !destination.getParentFile().exists()) {
             destination.getParentFile().mkdirs();

@@ -751,20 +618,27 @@
         //make sure we can write to destination
-        if( destination.exists() && !destination.canWrite() )
-        {
-            final String message = "Unable to open file " +
-                destination + " for writing.";
-            throw new IOException( message );
+        if (destination.exists() && !destination.canWrite()) {
+            final String message =
+                "Unable to open file " + destination + " for writing.";
+            throw new IOException(message);
         }
 
-        final FileInputStream input = new FileInputStream( source );
-        final FileOutputStream output = new FileOutputStream( destination );
-        IOUtils.copy( input, output );
-        IOUtils.shutdownStream( input );
-        IOUtils.shutdownStream( output );
+        final FileInputStream input = new FileInputStream(source);
+        try {
+            final FileOutputStream output = new FileOutputStream(destination);
+            try {
+                CopyUtils.copy(input, output);
+            } finally {
+                IOUtils.shutdownStream(output);
+            }
+        } finally {
+            IOUtils.shutdownStream(input);
+        }
 
-        if( source.length() != destination.length() )
-        {
-            final String message = "Failed to copy full contents from " + source +
-                " to " + destination;
-            throw new IOException( message );
+        if (source.length() != destination.length()) {
+            final String message =
+                "Failed to copy full contents from "
+                    + source
+                    + " to "
+                    + destination;
+            throw new IOException(message);
         }

@@ -788,9 +662,7 @@
      */
-    public static void copyURLToFile( final URL source, final File destination )
-        throws IOException
-    {
+    public static void copyURLToFile(final URL source, final File destination)
+                throws IOException {
         //does destination directory exist ?
-        if( destination.getParentFile() != null &&
-            !destination.getParentFile().exists() )
-        {
+        if (destination.getParentFile() != null
+            && !destination.getParentFile().exists()) {
             destination.getParentFile().mkdirs();

@@ -799,7 +671,6 @@
         //make sure we can write to destination
-        if( destination.exists() && !destination.canWrite() )
-        {
-            final String message = "Unable to open file " +
-                destination + " for writing.";
-            throw new IOException( message );
+        if (destination.exists() && !destination.canWrite()) {
+            final String message =
+                "Unable to open file " + destination + " for writing.";
+            throw new IOException(message);
         }

@@ -807,6 +678,12 @@
         final InputStream input = source.openStream();
-        final FileOutputStream output = new FileOutputStream( destination );
-        IOUtils.copy( input, output );
-        IOUtils.shutdownStream( input );
-        IOUtils.shutdownStream( output );
+        try {
+            final FileOutputStream output = new FileOutputStream(destination);
+            try {
+                CopyUtils.copy(input, output);
+            } finally {
+                IOUtils.shutdownStream(output);
+            }
+        } finally {
+            IOUtils.shutdownStream(input);
+        }
     }

@@ -831,13 +708,12 @@
      */
-    public static String normalize( final String path )
-    {
+    public static String normalize(final String path) {
         String normalized = path;
         // Resolve occurrences of "//" in the normalized path
-        while( true )
-        {
-            int index = normalized.indexOf( "//" );
-            if( index < 0 )
+        while (true) {
+            int index = normalized.indexOf("//");
+            if (index < 0)
                 break;
-            normalized = normalized.substring( 0, index ) +
-                normalized.substring( index + 1 );
+            normalized =
+                normalized.substring(0, index)
+                    + normalized.substring(index + 1);
         }

@@ -845,9 +721,9 @@
         // Resolve occurrences of "/./" in the normalized path
-        while( true )
-        {
-            int index = normalized.indexOf( "/./" );
-            if( index < 0 )
+        while (true) {
+            int index = normalized.indexOf("/./");
+            if (index < 0)
                 break;
-            normalized = normalized.substring( 0, index ) +
-                normalized.substring( index + 2 );
+            normalized =
+                normalized.substring(0, index)
+                    + normalized.substring(index + 2);
         }

@@ -855,12 +731,12 @@
         // Resolve occurrences of "/../" in the normalized path
-        while( true )
-        {
-            int index = normalized.indexOf( "/../" );
-            if( index < 0 )
+        while (true) {
+            int index = normalized.indexOf("/../");
+            if (index < 0)
                 break;
-            if( index == 0 )
-                return null;  // Trying to go outside our context
-            int index2 = normalized.lastIndexOf( '/', index - 1 );
-            normalized = normalized.substring( 0, index2 ) +
-                normalized.substring( index + 3 );
+            if (index == 0)
+                return null; // Trying to go outside our context
+            int index2 = normalized.lastIndexOf('/', index - 1);
+            normalized =
+                normalized.substring(0, index2)
+                    + normalized.substring(index + 3);
         }

@@ -883,7 +759,6 @@
      */
-    public static String catPath( final String lookupPath, final String path )
-    {
+    public static String catPath(final String lookupPath, final String path) {
         // Cut off the last slash and everything beyond
-        int index = lookupPath.lastIndexOf( "/" );
-        String lookup = lookupPath.substring( 0, index );
+        int index = lookupPath.lastIndexOf("/");
+        String lookup = lookupPath.substring(0, index);
         String pth = path;

@@ -891,11 +766,7 @@
         // Deal with .. by chopping dirs off the lookup path
-        while( pth.startsWith( "../" ) )
-        {
-            if( lookup.length() > 0 )
-            {
-                index = lookup.lastIndexOf( "/" );
-                lookup = lookup.substring( 0, index );
-            }
-            else
-            {
+        while (pth.startsWith("../")) {
+            if (lookup.length() > 0) {
+                index = lookup.lastIndexOf("/");
+                lookup = lookup.substring(0, index);
+            } else {
                 // More ..'s than dirs, return null

@@ -904,7 +775,7 @@
 
-            index = pth.indexOf( "../" ) + 3;
-            pth = pth.substring( index );
+            index = pth.indexOf("../") + 3;
+            pth = pth.substring(index);
         }
 
-        return new StringBuffer( lookup ).append( "/" ).append( pth ).toString();
+        return new StringBuffer(lookup).append("/").append(pth).toString();
     }

@@ -921,13 +792,10 @@
      */
-    public static File resolveFile( final File baseFile, String filename )
-    {
+    public static File resolveFile(final File baseFile, String filename) {
         String filenm = filename;
-        if( '/' != File.separatorChar )
-        {
-            filenm = filename.replace( '/', File.separatorChar );
+        if ('/' != File.separatorChar) {
+            filenm = filename.replace('/', File.separatorChar);
         }
 
-        if( '\\' != File.separatorChar )
-        {
-            filenm = filename.replace( '\\', File.separatorChar );
+        if ('\\' != File.separatorChar) {
+            filenm = filename.replace('\\', File.separatorChar);
         }

@@ -935,13 +803,8 @@
         // deal with absolute files
-        if( filenm.startsWith( File.separator ) )
-        {
-            File file = new File( filenm );
+        if (filenm.startsWith(File.separator)) {
+            File file = new File(filenm);
 
-            try
-            {
+            try {
                 file = file.getCanonicalFile();
-            }
-            catch( final IOException ioe )
-            {
-            }
+            } catch (final IOException ioe) {}
 

@@ -958,5 +821,4 @@
         int start = 0;
-        if( '\\' == File.separatorChar )
-        {
-            sb.append( filenm.charAt( 0 ) );
+        if ('\\' == File.separatorChar) {
+            sb.append(filenm.charAt(0));
             start++;

@@ -964,10 +826,9 @@
 
-        for( int i = start; i < chars.length; i++ )
-        {
+        for (int i = start; i < chars.length; i++) {
             final boolean doubleSeparator =
-                File.separatorChar == chars[ i ] && File.separatorChar == chars[ i - 1 ];
+                File.separatorChar == chars[i]
+                    && File.separatorChar == chars[i - 1];
 
-            if( !doubleSeparator )
-            {
-                sb.append( chars[ i ] );
+            if (!doubleSeparator) {
+                sb.append(chars[i]);
             }

@@ -978,11 +839,7 @@
         //must be relative
-        File file = ( new File( baseFile, filenm ) ).getAbsoluteFile();
+        File file = (new File(baseFile, filenm)).getAbsoluteFile();
 
-        try
-        {
+        try {
             file = file.getCanonicalFile();
-        }
-        catch( final IOException ioe )
-        {
-        }
+        } catch (final IOException ioe) {}
 

@@ -991,12 +848,3 @@
 
-    /**
-     * Delete a file. If file is directory delete it and all sub-directories.
-     * @param file file or directory to delete.
-     * @throws IOException in case deletion is unsuccessful
-     */
-    public static void forceDelete( final String file )
-        throws IOException
-    {
-        forceDelete( new File( file ) );
-    }
+
 

@@ -1007,16 +855,13 @@
      */
-    public static void forceDelete( final File file )
-        throws IOException
-    {
-        if( file.isDirectory() )
-        {
-            deleteDirectory( file );
-        }
-        else
-        {
-            if( !file.delete() )
-            {
+    public static void forceDelete(final File file) throws IOException {
+        if (file.isDirectory()) {
+            deleteDirectory(file);
+        } else {
+            if (!file.exists()) {
+                throw new FileNotFoundException("File does not exist: " + file);
+            }
+            if (!file.delete()) {
                 final String message =
-                    "File " + file + " unable to be deleted.";
-                throw new IOException( message );
+                    "Unable to delete file: " + file;
+                throw new IOException(message);
             }

@@ -1031,11 +876,6 @@
      */
-    public static void forceDeleteOnExit( final File file )
-        throws IOException
-    {
-        if( file.isDirectory() )
-        {
-            deleteDirectoryOnExit( file );
-        }
-        else
-        {
+    public static void forceDeleteOnExit(final File file) throws IOException {
+        if (file.isDirectory()) {
+            deleteDirectoryOnExit(file);
+        } else {
             file.deleteOnExit();

@@ -1049,7 +889,5 @@
      */
-    private static void deleteDirectoryOnExit( final File directory )
-        throws IOException
-    {
-        if( !directory.exists() )
-        {
+    private static void deleteDirectoryOnExit(final File directory)
+        throws IOException {
+        if (!directory.exists()) {
             return;

@@ -1057,3 +895,3 @@
 
-        cleanDirectoryOnExit( directory );
+        cleanDirectoryOnExit(directory);
         directory.deleteOnExit();

@@ -1066,15 +904,12 @@
      */
-    private static void cleanDirectoryOnExit( final File directory )
-        throws IOException
-    {
-        if( !directory.exists() )
-        {
+    private static void cleanDirectoryOnExit(final File directory)
+        throws IOException {
+        if (!directory.exists()) {
             final String message = directory + " does not exist";
-            throw new IllegalArgumentException( message );
+            throw new IllegalArgumentException(message);
         }
 
-        if( !directory.isDirectory() )
-        {
+        if (!directory.isDirectory()) {
             final String message = directory + " is not a directory";
-            throw new IllegalArgumentException( message );
+            throw new IllegalArgumentException(message);
         }

@@ -1084,11 +919,7 @@
         final File[] files = directory.listFiles();
-        for( int i = 0; i < files.length; i++ )
-        {
-            final File file = files[ i ];
-            try
-            {
-                forceDeleteOnExit( file );
-            }
-            catch( final IOException ioe )
-            {
+        for (int i = 0; i < files.length; i++) {
+            final File file = files[i];
+            try {
+                forceDeleteOnExit(file);
+            } catch (final IOException ioe) {
                 exception = ioe;

@@ -1097,4 +928,3 @@
 
-        if( null != exception )
-        {
+        if (null != exception) {
             throw exception;

@@ -1102,3 +932,2 @@
     }
-
 

@@ -1110,20 +939,17 @@
      */
-    public static void forceMkdir( final File directory )
-        throws IOException
-    {
-        if( directory.exists() )
-        {
-            if( directory.isFile() )
-            {
-                final String message = "File " + directory + " exists and is " +
-                    "not a directory. Unable to create directory.";
-                throw new IOException( message );
+    public static void forceMkdir(final File directory) throws IOException {
+        if (directory.exists()) {
+            if (directory.isFile()) {
+                final String message =
+                    "File "
+                        + directory
+                        + " exists and is "
+                        + "not a directory. Unable to create directory.";
+                throw new IOException(message);
             }
-        }
-        else
-        {
-            if( false == directory.mkdirs() )
-            {
-                final String message = "Unable to create directory " + directory;
-                throw new IOException( message );
+        } else {
+            if (false == directory.mkdirs()) {
+                final String message =
+                    "Unable to create directory " + directory;
+                throw new IOException(message);
             }

@@ -1137,18 +963,5 @@
      */
-    public static void deleteDirectory( final String directory )
-        throws IOException
-    {
-        deleteDirectory( new File( directory ) );
-    }
-
-    /**
-     * Recursively delete a directory.
-     * @param directory directory to delete
-     * @throws IOException in case deletion is unsuccessful
-     */
-    public static void deleteDirectory( final File directory )
-        throws IOException
-    {
-        if( !directory.exists() )
-        {
+    public static void deleteDirectory(final File directory)
+        throws IOException {
+        if (!directory.exists()) {
             return;

@@ -1156,8 +969,7 @@
 
-        cleanDirectory( directory );
-        if( !directory.delete() )
-        {
+        cleanDirectory(directory);
+        if (!directory.delete()) {
             final String message =
                 "Directory " + directory + " unable to be deleted.";
-            throw new IOException( message );
+            throw new IOException(message);
         }

@@ -1170,26 +982,12 @@
      */
-    public static void cleanDirectory( final String directory )
-        throws IOException
-    {
-        cleanDirectory( new File( directory ) );
-    }
-
-    /**
-     * Clean a directory without deleting it.
-     * @param directory directory to clean
-     * @throws IOException in case cleaning is unsuccessful
-     */
-    public static void cleanDirectory( final File directory )
-        throws IOException
-    {
-        if( !directory.exists() )
-        {
+    public static void cleanDirectory(final File directory)
+        throws IOException {
+        if (!directory.exists()) {
             final String message = directory + " does not exist";
-            throw new IllegalArgumentException( message );
+            throw new IllegalArgumentException(message);
         }
 
-        if( !directory.isDirectory() )
-        {
+        if (!directory.isDirectory()) {
             final String message = directory + " is not a directory";
-            throw new IllegalArgumentException( message );
+            throw new IllegalArgumentException(message);
         }

@@ -1199,11 +997,7 @@
         final File[] files = directory.listFiles();
-        for( int i = 0; i < files.length; i++ )
-        {
-            final File file = files[ i ];
-            try
-            {
-                forceDelete( file );
-            }
-            catch( final IOException ioe )
-            {
+        for (int i = 0; i < files.length; i++) {
+            final File file = files[i];
+            try {
+                forceDelete(file);
+            } catch (final IOException ioe) {
                 exception = ioe;

@@ -1212,4 +1006,3 @@
 
-        if( null != exception )
-        {
+        if (null != exception) {
             throw exception;

@@ -1224,5 +1017,149 @@
      */
-    public static long sizeOfDirectory( final String directory )
-    {
-        return sizeOfDirectory( new File( directory ) );
+    public static long sizeOfDirectory(final File directory) {
+        if (!directory.exists()) {
+            final String message = directory + " does not exist";
+            throw new IllegalArgumentException(message);
+        }
+
+        if (!directory.isDirectory()) {
+            final String message = directory + " is not a directory";
+            throw new IllegalArgumentException(message);
+        }
+
+        long size = 0;
+
+        final File[] files = directory.listFiles();
+        for (int i = 0; i < files.length; i++) {
+            final File file = files[i];
+
+            if (file.isDirectory()) {
+                size += sizeOfDirectory(file);
+            } else {
+                size += file.length();
+            }
+        }
+
+        return size;
+    }
+   
+     /**
+      * Tests if the specified <code>File</code> is newer than the reference 
+      * <code>File</code>.
+      *
+      * @param file the <code>File</code> of which the modification date must be compared
+      * @param reference the <code>File</code> of which the modification date is used 
+      * like reference
+      * @return true if the <code>File</code> exists and has been modified more recently
+      * than the reference <code>File</code>.
+      */
+     public static boolean isFileNewer(final File file, final File reference) {
+         if (reference == null) {
+             throw new IllegalArgumentException("No specified reference file");
+         }
+         if (!reference.exists()) {
+             throw new IllegalArgumentException("The reference file '" + file + "' doesn't exist");
+         }
+ 
+         return isFileNewer(file, reference.lastModified());
+     }
+ 
+     /**
+      * Tests if the specified <code>File</code> is newer than the specified 
+      * <code>Date</code>
+      *
+      * @param file the <code>File</code> of which the modification date must be compared
+      * @param date the date reference
+      * @return true if the <code>File</code> exists and has been modified after
+      * the given <code>Date</code>.
+      */
+     public static boolean isFileNewer(final File file, final Date date) {
+         if (date == null) {
+             throw new IllegalArgumentException("No specified date");
+         }
+         return isFileNewer(file, date.getTime());
+     }
+ 
+     /**
+      * Tests if the specified <code>File</code> is newer than the specified 
+      * time reference.
+      *
+      * @param file the <code>File</code> of which the modification date must be compared.
+      * @param timeMillis the time reference measured in milliseconds since the epoch 
+      * (00:00:00 GMT, January 1, 1970)
+      * @return true if the <code>File</code> exists and has been modified after
+      * the given time reference.
+      */
+     public static boolean isFileNewer(final File file, final long timeMillis) {
+         if (file == null) {
+             throw new IllegalArgumentException("No specified file");
+         }
+         if (!file.exists()) {
+             return false;
+         }
+ 
+         return file.lastModified() > timeMillis;
+    }
+
+    // ----------------------------------------------------------------
+    // Deprecated methods
+    // ----------------------------------------------------------------
+
+    /**
+     * Returns the filename portion of a file specification string.
+     * Matches the equally named unix command.
+     * @param filename filename to inspect
+     * @return The filename string without extension.
+     * @deprecated This method will be deleted before a 1.0 release
+     * TODO DELETE before 1.0
+     */
+    public static String basename(String filename) {
+        return basename(filename, extension(filename));
+    }
+
+    /**
+     * Returns the filename portion of a file specification string.
+     * Matches the equally named unix command.
+     * @param filename filename to inspect
+     * @param suffix additional remaining portion of name that if matches will
+     * be removed
+     * @return The filename string without the suffix.
+     * @deprecated This method will be deleted.
+     */
+    public static String basename(String filename, String suffix) {
+        int i = filename.lastIndexOf(File.separator) + 1;
+        int lastDot =
+            ((suffix != null) && (suffix.length() > 0))
+                ? filename.lastIndexOf(suffix)
+                : -1;
+
+        if (lastDot >= 0) {
+            return filename.substring(i, lastDot);
+        } else if (i > 0) {
+            return filename.substring(i);
+        } else {
+            return filename; // else returns all (no path and no extension)
+        }
+    }
+
+    /**
+     * Delete a file. If file is directory delete it and all sub-directories.
+     * @param file file or directory to delete.
+     * @throws IOException in case deletion is unsuccessful
+     * @deprecated Use {@link #forceDelete(File)}
+     */
+    public static void forceDelete(final String file) throws IOException {
+        forceDelete(new File(file));
+    }
+
+
+
+    /**
+     * Clean a directory without deleting it.
+     * @param directory directory to clean
+     * @throws IOException in case cleaning is unsuccessful
+     * @deprecated Use {@link #cleanDirectory(File)}
+     */
+    public static void cleanDirectory(final String directory)
+        throws IOException {
+        cleanDirectory(new File(directory));
     }

@@ -1234,35 +1171,103 @@
      * @return size of directory in bytes.
+     * @deprecated Use {@link #sizeOfDirectory(File)}
      */
-    public static long sizeOfDirectory( final File directory )
-    {
-        if( !directory.exists() )
-        {
-            final String message = directory + " does not exist";
-            throw new IllegalArgumentException( message );
+    public static long sizeOfDirectory(final String directory) {
+        return sizeOfDirectory(new File(directory));
+    }
+
+    /**
+     * Copy file from source to destination. If <code>destinationDirectory</code> does not exist, it
+     * (and any parent directories) will be created. If a file <code>source</code> in
+     * <code>destinationDirectory</code> exists, it will be overwritten.
+     *
+     * @param source An existing <code>File</code> to copy.
+     * @param destinationDirectory A directory to copy <code>source</code> into.
+     *
+     * @throws FileNotFoundException if <code>source</code> isn't a normal file.
+     * @throws IllegalArgumentException if <code>destinationDirectory</code> isn't a directory.
+     * @throws IOException if <code>source</code> does not exist, the file in
+     * <code>destinationDirectory</code> cannot be written to, or an IO error occurs during copying.
+     *
+     * @deprecated Use {@link #copyFileToDirectory(File, File)}
+     */
+    public static void copyFileToDirectory(
+        final String source,
+        final String destinationDirectory)
+        throws IOException {
+        copyFileToDirectory(new File(source), new File(destinationDirectory));
+    }
+
+    /**
+     * Recursively delete a directory.
+     * @param directory directory to delete
+     * @throws IOException in case deletion is unsuccessful
+     * @deprecated Use {@link #deleteDirectory(File)}
+     */
+    public static void deleteDirectory(final String directory)
+        throws IOException {
+        deleteDirectory(new File(directory));
+    }
+
+    /**
+     * Returns the directory path portion of a file specification string.
+     * Matches the equally named unix command.
+     * @param filename filename to inspect
+     * @return The directory portion excluding the ending file separator.
+     * @deprecated Use {@link #getPath(File)}
+     * TODO DELETE before 1.0
+     */
+    public static String dirname(String filename) {
+        int i = filename.lastIndexOf(File.separator);
+        return (i >= 0 ? filename.substring(0, i) : "");
+    }
+
+    /**
+     * Returns the filename portion of a file specification string.
+     * @param filename filename to inspect
+     * @return The filename string with extension.
+     * @deprecated Use {@link #removeExtension(File)}
+     * TODO DELETE before 1.0
+     */
+    public static String filename(String filename) {
+        int i = filename.lastIndexOf(File.separator);
+        return (i >= 0 ? filename.substring(i + 1) : filename);
+    }
+
+
+
+    /**
+     * Returns the extension portion of a file specification string.
+     * This everything after the last dot '.' in the filename (NOT including
+     * the dot).
+     * @param filename filename to inspect
+     * @return the extension
+     * @deprecated Use {@link #getExtension(File)}
+     * TODO probably duplicate method. See getExtension
+     */
+    public static String extension(String filename) {
+        int lastDot = filename.lastIndexOf('.');
+
+        if (lastDot >= 0) {
+            return filename.substring(lastDot + 1);
+        } else {
+            return "";
         }
+    }
 
-        if( !directory.isDirectory() )
-        {
-            final String message = directory + " is not a directory";
-            throw new IllegalArgumentException( message );
-        }
-
-        long size = 0;
-
-        final File[] files = directory.listFiles();
-        for( int i = 0; i < files.length; i++ )
-        {
-            final File file = files[ i ];
-
-            if( file.isDirectory() )
-            {
-                size += sizeOfDirectory( file );
-            }
-            else
-            {
-                size += file.length();
-            }
-        }
-
-        return size;
+    /**
+     * Copy a file. The new file will be created if it does not exist. This is
+     * an inefficient method, which just calls {@link #fileRead(String)} and
+     * then {@link #fileWrite(String,String)}
+     *
+     * @param inFileName the file to copy
+     * @param outFileName the file to copy to
+     * @throws Exception if fileRead or fileWrite throw it
+     * @deprecated This method will be deleted.
+     *
+     * TODO This method is not a good idea. It doesn't do a binary copy. DELETE.
+     */
+    public static void fileCopy(String inFileName, String outFileName)
+        throws Exception {
+        String content = fileRead(inFileName);
+        fileWrite(outFileName, content);
     }

