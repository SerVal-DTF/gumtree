Previous File: OUTPUT/commons-io/prevFiles/prev_7c58d8src#main#java#org#apache#commons#io#IOUtils.java
Revised File: OUTPUT/commons-io/revFiles/7c58d8src#main#java#org#apache#commons#io#IOUtils.java
DiffEntry: @@ -34,3 +34,2 @@
 import java.io.Reader;
-import java.io.UnsupportedEncodingException;
 import java.io.Writer;

@@ -46,3 +45,2 @@
 import java.nio.charset.Charset;
-import java.nio.charset.UnsupportedCharsetException;
 import java.util.ArrayList;

@@ -56,3 +54,3 @@
  * General IO stream manipulation utilities.
- * <p>
+ * <p/>
  * This class provides static utility methods for input/output operations.

@@ -65,3 +63,3 @@
  * </ul>
- * <p>
+ * <p/>
  * The byte-to-char methods and char-to-byte methods involve a conversion step.

@@ -72,3 +70,3 @@
  * development to production.
- * <p>
+ * <p/>
  * All the methods in this class that read a stream are buffered internally.

@@ -77,3 +75,3 @@
  * to be efficient in tests.
- * <p>
+ * <p/>
  * The various copy methods all delegate the actual copying to one of the following methods:

@@ -88,6 +86,6 @@
  * {@link #copyLarge(InputStream, OutputStream, byte[])}.
- * <p>
+ * <p/>
  * Applications can re-use buffers by using the underlying methods directly.
  * This may improve performance for applications that need to do a lot of copying.
- * <p>
+ * <p/>
  * Wherever possible, the methods in this class do <em>not</em> flush or close

@@ -96,3 +94,3 @@
  * closing streams after use.
- * <p>
+ * <p/>
  * Origin of code: Excalibur.

@@ -195,6 +193,6 @@
      * Closes an <code>Reader</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Reader#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -214,6 +212,6 @@
      *
-     * @param input  the Reader to close, may be null or already closed
+     * @param input the Reader to close, may be null or already closed
      */
     public static void closeQuietly(final Reader input) {
-        closeQuietly((Closeable)input);
+        closeQuietly((Closeable) input);
     }

@@ -222,6 +220,6 @@
      * Closes an <code>Writer</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Writer#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -240,6 +238,6 @@
      *
-     * @param output  the Writer to close, may be null or already closed
+     * @param output the Writer to close, may be null or already closed
      */
     public static void closeQuietly(final Writer output) {
-        closeQuietly((Closeable)output);
+        closeQuietly((Closeable) output);
     }

@@ -248,6 +246,6 @@
      * Closes an <code>InputStream</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link InputStream#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -267,6 +265,6 @@
      *
-     * @param input  the InputStream to close, may be null or already closed
+     * @param input the InputStream to close, may be null or already closed
      */
     public static void closeQuietly(final InputStream input) {
-        closeQuietly((Closeable)input);
+        closeQuietly((Closeable) input);
     }

@@ -275,6 +273,6 @@
      * Closes an <code>OutputStream</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link OutputStream#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -295,6 +293,6 @@
      *
-     * @param output  the OutputStream to close, may be null or already closed
+     * @param output the OutputStream to close, may be null or already closed
      */
     public static void closeQuietly(final OutputStream output) {
-        closeQuietly((Closeable)output);
+        closeQuietly((Closeable) output);
     }

@@ -303,8 +301,8 @@
      * Closes a <code>Closeable</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Closeable#close()}, except any exceptions will be ignored. This is typically used in
      * finally blocks.
-     * <p>
+     * <p/>
      * Example code:
-     *
+     * <p/>
      * <pre>

@@ -321,5 +319,5 @@
      * </pre>
-     *
+     * <p/>
      * Closing all streams:
-     *
+     * <p/>
      * <pre>

@@ -333,4 +331,3 @@
      *
-     * @param closeable
-     *            the objects to close, may be null or already closed
+     * @param closeable the objects to close, may be null or already closed
      * @since 2.0

@@ -349,5 +346,5 @@
      * Closes a <code>Closeable</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Closeable#close()}, except any exceptions will be ignored.
-     * <p>
+     * <p/>
      * This is typically used in finally blocks to ensure that the closeable is closed

@@ -360,5 +357,5 @@
      * and reporting close failure as well is not necessary or useful.
-     * <p>
+     * <p/>
      * Example code:
-     *
+     * <p/>
      * <pre>

@@ -375,3 +372,3 @@
      * </pre>
-     *
+     * <p/>
      * Closing all streams:

@@ -386,6 +383,5 @@
      *
-     * @param closeables
-     *            the objects to close, may be null or already closed
-     * @since 2.5
+     * @param closeables the objects to close, may be null or already closed
      * @see #closeQuietly(Closeable)
+     * @since 2.5
      */

@@ -402,6 +398,6 @@
      * Closes a <code>Socket</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Socket#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -423,4 +419,4 @@
      */
-    public static void closeQuietly(final Socket sock){
-        if (sock != null){
+    public static void closeQuietly(final Socket sock) {
+        if (sock != null) {
             try {

@@ -435,6 +431,6 @@
      * Closes a <code>Selector</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link Selector#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -456,6 +452,6 @@
      */
-    public static void closeQuietly(final Selector selector){
-        if (selector != null){
+    public static void closeQuietly(final Selector selector) {
+        if (selector != null) {
             try {
-              selector.close();
+                selector.close();
             } catch (final IOException ioe) {

@@ -468,6 +464,6 @@
      * Closes a <code>ServerSocket</code> unconditionally.
-     * <p>
+     * <p/>
      * Equivalent to {@link ServerSocket#close()}, except any exceptions will be ignored.
      * This is typically used in finally blocks.
-     * <p>
+     * <p/>
      * Example code:

@@ -489,4 +485,4 @@
      */
-    public static void closeQuietly(final ServerSocket sock){
-        if (sock != null){
+    public static void closeQuietly(final ServerSocket sock) {
+        if (sock != null) {
             try {

@@ -502,3 +498,3 @@
      * same data as result InputStream.
-     * <p>
+     * <p/>
      * This method is useful where,

@@ -527,3 +523,3 @@
      * same data as result InputStream.
-     * <p>
+     * <p/>
      * This method is useful where,

@@ -554,8 +550,7 @@
      *
-     * @param reader
-     *            the reader to wrap or return (not null)
+     * @param reader the reader to wrap or return (not null)
      * @return the given reader or a new {@link BufferedReader} for the given reader
-     * @since 2.2
-     * @see #buffer(Reader)
      * @throws NullPointerException if the input parameter is null
+     * @see #buffer(Reader)
+     * @since 2.2
      */

@@ -569,9 +564,8 @@
      *
-     * @param reader
-     *            the reader to wrap or return (not null)
+     * @param reader the reader to wrap or return (not null)
      * @param size the buffer size, if a new BufferedReader is created.
      * @return the given reader or a new {@link BufferedReader} for the given reader
-     * @since 2.5
-     * @see #buffer(Reader)
      * @throws NullPointerException if the input parameter is null
+     * @see #buffer(Reader)
+     * @since 2.5
      */

@@ -582,10 +576,9 @@
     /**
-     * Returns the given reader if it is already a {@link BufferedReader}, otherwise creates a BufferedReader from the given
-     * reader.
+     * Returns the given reader if it is already a {@link BufferedReader}, otherwise creates a BufferedReader from
+     * the given reader.
      *
-     * @param reader
-     *            the reader to wrap or return (not null)
+     * @param reader the reader to wrap or return (not null)
      * @return the given reader or a new {@link BufferedReader} for the given reader
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -596,11 +589,10 @@
     /**
-     * Returns the given reader if it is already a {@link BufferedReader}, otherwise creates a BufferedReader from the given
-     * reader.
+     * Returns the given reader if it is already a {@link BufferedReader}, otherwise creates a BufferedReader from the
+     * given reader.
      *
-     * @param reader
-     *            the reader to wrap or return (not null)
+     * @param reader the reader to wrap or return (not null)
      * @param size the buffer size, if a new BufferedReader is created.
      * @return the given reader or a new {@link BufferedReader} for the given reader
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -611,10 +603,9 @@
     /**
-     * Returns the given Writer if it is already a {@link BufferedWriter}, otherwise creates a BufferedWriter from the given
-     * Writer.
+     * Returns the given Writer if it is already a {@link BufferedWriter}, otherwise creates a BufferedWriter from the
+     * given Writer.
      *
-     * @param writer
-     *            the Writer to wrap or return (not null)
+     * @param writer the Writer to wrap or return (not null)
      * @return the given Writer or a new {@link BufferedWriter} for the given Writer
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -625,11 +616,10 @@
     /**
-     * Returns the given Writer if it is already a {@link BufferedWriter}, otherwise creates a BufferedWriter from the given
-     * Writer.
+     * Returns the given Writer if it is already a {@link BufferedWriter}, otherwise creates a BufferedWriter from the
+     * given Writer.
      *
-     * @param writer
-     *            the Writer to wrap or return (not null)
+     * @param writer the Writer to wrap or return (not null)
      * @param size the buffer size, if a new BufferedWriter is created.
      * @return the given Writer or a new {@link BufferedWriter} for the given Writer
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -640,10 +630,9 @@
     /**
-     * Returns the given OutputStream if it is already a {@link BufferedOutputStream}, otherwise creates a BufferedOutputStream from the given
-     * OutputStream.
+     * Returns the given OutputStream if it is already a {@link BufferedOutputStream}, otherwise creates a
+     * BufferedOutputStream from the given OutputStream.
      *
-     * @param outputStream
-     *            the OutputStream to wrap or return (not null)
+     * @param outputStream the OutputStream to wrap or return (not null)
      * @return the given OutputStream or a new {@link BufferedOutputStream} for the given OutputStream
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -654,3 +643,4 @@
         }
-        return outputStream instanceof BufferedOutputStream ? (BufferedOutputStream) outputStream : new BufferedOutputStream(outputStream);
+        return outputStream instanceof BufferedOutputStream ?
+                (BufferedOutputStream) outputStream : new BufferedOutputStream(outputStream);
     }

@@ -658,11 +648,10 @@
     /**
-     * Returns the given OutputStream if it is already a {@link BufferedOutputStream}, otherwise creates a BufferedOutputStream from the given
-     * OutputStream.
+     * Returns the given OutputStream if it is already a {@link BufferedOutputStream}, otherwise creates a
+     * BufferedOutputStream from the given OutputStream.
      *
-     * @param outputStream
-     *            the OutputStream to wrap or return (not null)
+     * @param outputStream the OutputStream to wrap or return (not null)
      * @param size the buffer size, if a new BufferedOutputStream is created.
      * @return the given OutputStream or a new {@link BufferedOutputStream} for the given OutputStream
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -673,3 +662,4 @@
         }
-        return outputStream instanceof BufferedOutputStream ? (BufferedOutputStream) outputStream : new BufferedOutputStream(outputStream, size);
+        return outputStream instanceof BufferedOutputStream ?
+                (BufferedOutputStream) outputStream : new BufferedOutputStream(outputStream, size);
     }

@@ -677,10 +667,9 @@
     /**
-     * Returns the given InputStream if it is already a {@link BufferedInputStream}, otherwise creates a BufferedInputStream from the given
-     * InputStream.
+     * Returns the given InputStream if it is already a {@link BufferedInputStream}, otherwise creates a
+     * BufferedInputStream from the given InputStream.
      *
-     * @param inputStream
-     *            the InputStream to wrap or return (not null)
+     * @param inputStream the InputStream to wrap or return (not null)
      * @return the given InputStream or a new {@link BufferedInputStream} for the given InputStream
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -691,3 +680,4 @@
         }
-        return inputStream instanceof BufferedInputStream ? (BufferedInputStream) inputStream : new BufferedInputStream(inputStream);
+        return inputStream instanceof BufferedInputStream ?
+                (BufferedInputStream) inputStream : new BufferedInputStream(inputStream);
     }

@@ -695,11 +685,10 @@
     /**
-     * Returns the given InputStream if it is already a {@link BufferedInputStream}, otherwise creates a BufferedInputStream from the given
-     * InputStream.
+     * Returns the given InputStream if it is already a {@link BufferedInputStream}, otherwise creates a
+     * BufferedInputStream from the given InputStream.
      *
-     * @param inputStream
-     *            the InputStream to wrap or return (not null)
+     * @param inputStream the InputStream to wrap or return (not null)
      * @param size the buffer size, if a new BufferedInputStream is created.
      * @return the given InputStream or a new {@link BufferedInputStream} for the given InputStream
-     * @since 2.5
      * @throws NullPointerException if the input parameter is null
+     * @since 2.5
      */

@@ -710,3 +699,4 @@
         }
-        return inputStream instanceof BufferedInputStream ? (BufferedInputStream) inputStream : new BufferedInputStream(inputStream, size);
+        return inputStream instanceof BufferedInputStream ?
+                (BufferedInputStream) inputStream : new BufferedInputStream(inputStream, size);
     }

@@ -715,5 +705,6 @@
     //-----------------------------------------------------------------------
+
     /**
      * Gets the contents of an <code>InputStream</code> as a <code>byte[]</code>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -721,6 +712,6 @@
      *
-     * @param input  the <code>InputStream</code> to read from
+     * @param input the <code>InputStream</code> to read from
      * @return the requested byte array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      */

@@ -743,3 +734,4 @@
      * @return the requested byte array
-     * @throws IOException if an I/O error occurs or <code>InputStream</code> size differ from parameter size
+     * @throws IOException              if an I/O error occurs or <code>InputStream</code> size differ from parameter
+     * size
      * @throws IllegalArgumentException if size is less than zero or size is greater than Integer.MAX_VALUE

@@ -750,7 +742,7 @@
 
-      if(size > Integer.MAX_VALUE) {
-          throw new IllegalArgumentException("Size cannot be greater than Integer max value: " + size);
-      }
+        if (size > Integer.MAX_VALUE) {
+            throw new IllegalArgumentException("Size cannot be greater than Integer max value: " + size);
+        }
 
-      return toByteArray(input, (int) size);
+        return toByteArray(input, (int) size);
     }

@@ -761,2 +753,3 @@
      * when <code>InputStream</code> size is known
+     *
      * @param input the <code>InputStream</code> to read from

@@ -764,3 +757,4 @@
      * @return the requested byte array
-     * @throws IOException if an I/O error occurs or <code>InputStream</code> size differ from parameter size
+     * @throws IOException              if an I/O error occurs or <code>InputStream</code> size differ from parameter
+     * size
      * @throws IllegalArgumentException if size is less than zero

@@ -796,3 +790,3 @@
      * using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -800,6 +794,6 @@
      *
-     * @param input  the <code>Reader</code> to read from
+     * @param input the <code>Reader</code> to read from
      * @return the requested byte array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @deprecated 2.5 use {@link #toByteArray(Reader, Charset)} instead

@@ -814,3 +808,3 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -818,7 +812,7 @@
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>Reader</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested byte array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -834,6 +828,6 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -841,10 +835,10 @@
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>Reader</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested byte array
-     * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws NullPointerException                         if the input is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -858,9 +852,9 @@
      * using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This is the same as {@link String#getBytes()}.
      *
-     * @param input  the <code>String</code> to convert
+     * @param input the <code>String</code> to convert
      * @return the requested byte array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs (never occurs)
+     * @throws IOException          if an I/O error occurs (never occurs)
      * @deprecated 2.5 Use {@link String#getBytes()} instead

@@ -876,9 +870,6 @@
      *
-     * @param uri
-     *            the <code>URI</code> to read
+     * @param uri the <code>URI</code> to read
      * @return the requested byte array
-     * @throws NullPointerException
-     *             if the uri is null
-     * @throws IOException
-     *             if an I/O exception occurs
+     * @throws NullPointerException if the uri is null
+     * @throws IOException          if an I/O exception occurs
      * @since 2.4

@@ -892,9 +883,6 @@
      *
-     * @param url
-     *            the <code>URL</code> to read
+     * @param url the <code>URL</code> to read
      * @return the requested byte array
-     * @throws NullPointerException
-     *             if the input is null
-     * @throws IOException
-     *             if an I/O exception occurs
+     * @throws NullPointerException if the input is null
+     * @throws IOException          if an I/O exception occurs
      * @since 2.4

@@ -913,9 +901,6 @@
      *
-     * @param urlConn
-     *            the <code>URLConnection</code> to read
+     * @param urlConn the <code>URLConnection</code> to read
      * @return the requested byte array
-     * @throws NullPointerException
-     *             if the urlConn is null
-     * @throws IOException
-     *             if an I/O exception occurs
+     * @throws NullPointerException if the urlConn is null
+     * @throws IOException          if an I/O exception occurs
      * @since 2.4

@@ -933,2 +918,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -936,3 +922,3 @@
      * using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -940,6 +926,6 @@
      *
-     * @param is  the <code>InputStream</code> to read from
+     * @param is the <code>InputStream</code> to read from
      * @return the requested character array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -955,3 +941,3 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -959,7 +945,7 @@
      *
-     * @param is  the <code>InputStream</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param is the <code>InputStream</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested character array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -976,6 +962,6 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -983,10 +969,10 @@
      *
-     * @param is  the <code>InputStream</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param is the <code>InputStream</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested character array
-     * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws NullPointerException                         if the input is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -999,3 +985,3 @@
      * Gets the contents of a <code>Reader</code> as a character array.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1003,6 +989,6 @@
      *
-     * @param input  the <code>Reader</code> to read from
+     * @param input the <code>Reader</code> to read from
      * @return the requested character array
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1017,2 +1003,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1020,3 +1007,3 @@
      * using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1024,6 +1011,6 @@
      *
-     * @param input  the <code>InputStream</code> to read from
+     * @param input the <code>InputStream</code> to read from
      * @return the requested String
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @deprecated 2.5 use {@link #toString(InputStream, Charset)} instead

@@ -1042,7 +1029,8 @@
      * </p>
-     * @param input  the <code>InputStream</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     *
+     * @param input the <code>InputStream</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested String
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -1058,6 +1046,6 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1065,10 +1053,10 @@
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>InputStream</code> to read from
+     * @param encoding the encoding to use, null means platform default
      * @return the requested String
-     * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws NullPointerException                         if the input is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      */

@@ -1081,3 +1069,3 @@
      * Gets the contents of a <code>Reader</code> as a String.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1085,6 +1073,6 @@
      *
-     * @param input  the <code>Reader</code> to read from
+     * @param input the <code>Reader</code> to read from
      * @return the requested String
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      */

@@ -1099,4 +1087,3 @@
      *
-     * @param uri
-     *            The URI source.
+     * @param uri The URI source.
      * @return The contents of the URL as a String.

@@ -1114,6 +1101,4 @@
      *
-     * @param uri
-     *            The URI source.
-     * @param encoding
-     *            The encoding name for the URL contents.
+     * @param uri The URI source.
+     * @param encoding The encoding name for the URL contents.
      * @return The contents of the URL as a String.

@@ -1129,11 +1114,9 @@
      *
-     * @param uri
-     *            The URI source.
-     * @param encoding
-     *            The encoding name for the URL contents.
+     * @param uri The URI source.
+     * @param encoding The encoding name for the URL contents.
      * @return The contents of the URL as a String.
-     * @throws IOException if an I/O exception occurs.
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws IOException                                  if an I/O exception occurs.
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 2.1

@@ -1147,4 +1130,3 @@
      *
-     * @param url
-     *            The URL source.
+     * @param url The URL source.
      * @return The contents of the URL as a String.

@@ -1162,6 +1144,4 @@
      *
-     * @param url
-     *            The URL source.
-     * @param encoding
-     *            The encoding name for the URL contents.
+     * @param url The URL source.
+     * @param encoding The encoding name for the URL contents.
      * @return The contents of the URL as a String.

@@ -1182,11 +1162,9 @@
      *
-     * @param url
-     *            The URL source.
-     * @param encoding
-     *            The encoding name for the URL contents.
+     * @param url The URL source.
+     * @param encoding The encoding name for the URL contents.
      * @return The contents of the URL as a String.
-     * @throws IOException if an I/O exception occurs.
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws IOException                                  if an I/O exception occurs.
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 2.1

@@ -1204,3 +1182,3 @@
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs (never occurs)
+     * @throws IOException          if an I/O error occurs (never occurs)
      * @deprecated 2.5 Use {@link String#String(byte[])} instead

@@ -1216,3 +1194,3 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at

@@ -1221,6 +1199,6 @@
      * @param input the byte array to read from
-     * @param encoding  the encoding to use, null means platform default
+     * @param encoding the encoding to use, null means platform default
      * @return the requested String
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs (never occurs)
+     * @throws IOException          if an I/O error occurs (never occurs)
      */

@@ -1232,2 +1210,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1235,3 +1214,3 @@
      * one entry per line, using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1239,6 +1218,6 @@
      *
-     * @param input  the <code>InputStream</code> to read from, not null
+     * @param input the <code>InputStream</code> to read from, not null
      * @return the list of Strings, never null
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1254,3 +1233,3 @@
      * one entry per line, using the specified character encoding.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1258,7 +1237,7 @@
      *
-     * @param input  the <code>InputStream</code> to read from, not null
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>InputStream</code> to read from, not null
+     * @param encoding the encoding to use, null means platform default
      * @return the list of Strings, never null
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -1273,6 +1252,6 @@
      * one entry per line, using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1280,10 +1259,10 @@
      *
-     * @param input  the <code>InputStream</code> to read from, not null
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>InputStream</code> to read from, not null
+     * @param encoding the encoding to use, null means platform default
      * @return the list of Strings, never null
-     * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws NullPointerException                         if the input is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -1297,3 +1276,3 @@
      * one entry per line.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a

@@ -1301,6 +1280,6 @@
      *
-     * @param input  the <code>Reader</code> to read from, not null
+     * @param input the <code>Reader</code> to read from, not null
      * @return the list of Strings, never null
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1320,5 +1299,6 @@
     //-----------------------------------------------------------------------
+
     /**
      * Returns an Iterator for the lines in a <code>Reader</code>.
-     * <p>
+     * <p/>
      * <code>LineIterator</code> holds a reference to the open

@@ -1328,3 +1308,3 @@
      * {@link LineIterator#close()} or {@link LineIterator#closeQuietly(LineIterator)}.
-     * <p>
+     * <p/>
      * The recommended usage pattern is:

@@ -1342,3 +1322,3 @@
      *
-     * @param reader  the <code>Reader</code> to read from, not null
+     * @param reader the <code>Reader</code> to read from, not null
      * @return an Iterator of the lines in the reader, never null

@@ -1354,3 +1334,3 @@
      * the character encoding specified (or default encoding if null).
-     * <p>
+     * <p/>
      * <code>LineIterator</code> holds a reference to the open

@@ -1360,3 +1340,3 @@
      * {@link LineIterator#close()} or {@link LineIterator#closeQuietly(LineIterator)}.
-     * <p>
+     * <p/>
      * The recommended usage pattern is:

@@ -1374,7 +1354,7 @@
      *
-     * @param input  the <code>InputStream</code> to read from, not null
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>InputStream</code> to read from, not null
+     * @param encoding the encoding to use, null means platform default
      * @return an Iterator of the lines in the reader, never null
      * @throws IllegalArgumentException if the input is null
-     * @throws IOException if an I/O error occurs, such as if the encoding is invalid
+     * @throws IOException              if an I/O error occurs, such as if the encoding is invalid
      * @since 2.3

@@ -1388,3 +1368,3 @@
      * the character encoding specified (or default encoding if null).
-     * <p>
+     * <p/>
      * <code>LineIterator</code> holds a reference to the open

@@ -1394,3 +1374,3 @@
      * {@link LineIterator#close()} or {@link LineIterator#closeQuietly(LineIterator)}.
-     * <p>
+     * <p/>
      * The recommended usage pattern is:

@@ -1408,10 +1388,10 @@
      *
-     * @param input  the <code>InputStream</code> to read from, not null
-     * @param encoding  the encoding to use, null means platform default
+     * @param input the <code>InputStream</code> to read from, not null
+     * @param encoding the encoding to use, null means platform default
      * @return an Iterator of the lines in the reader, never null
-     * @throws IllegalArgumentException if the input is null
-     * @throws IOException if an I/O error occurs, such as if the encoding is invalid
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws IllegalArgumentException                     if the input is null
+     * @throws IOException                                  if an I/O error occurs, such as if the encoding is invalid
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.2

@@ -1423,2 +1403,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1453,3 +1434,3 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at

@@ -1460,6 +1441,6 @@
      * @return an input stream
-     * @throws IOException if the encoding is invalid
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws IOException                                  if the encoding is invalid
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 2.0

@@ -1471,2 +1452,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1501,3 +1483,3 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at

@@ -1508,6 +1490,6 @@
      * @return an input stream
-     * @throws IOException if the encoding is invalid
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @throws IOException                                  if the encoding is invalid
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -1521,2 +1503,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1524,7 +1507,7 @@
      *
-     * @param data  the byte array to write, do not modify during output,
+     * @param data the byte array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1543,7 +1526,7 @@
      *
-     * @param data  the byte array to write, do not modify during output,
+     * @param data the byte array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.5

@@ -1555,3 +1538,3 @@
             int offset = 0;
-            while(bytes > 0) {
+            while (bytes > 0) {
                 int chunk = Math.min(bytes, DEFAULT_BUFFER_SIZE);

@@ -1567,10 +1550,10 @@
      * using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(byte[])}.
      *
-     * @param data  the byte array to write, do not modify during output,
+     * @param data the byte array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1586,11 +1569,11 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(byte[], String)}.
      *
-     * @param data  the byte array to write, do not modify during output,
+     * @param data the byte array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>Writer</code> to write to
-     * @param encoding  the encoding to use, null means platform default
+     * @param output the <code>Writer</code> to write to
+     * @param encoding the encoding to use, null means platform default
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -1606,17 +1589,17 @@
      * using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(byte[], String)}.
      *
-     * @param data  the byte array to write, do not modify during output,
+     * @param data the byte array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>Writer</code> to write to
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param output the <code>Writer</code> to write to
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException                         if output is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -1629,2 +1612,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1632,7 +1616,7 @@
      *
-     * @param data  the char array to write, do not modify during output,
+     * @param data the char array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1650,7 +1634,7 @@
      *
-     * @param data  the char array to write, do not modify during output,
+     * @param data the char array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.5

@@ -1661,3 +1645,3 @@
             int offset = 0;
-            while(bytes > 0) {
+            while (bytes > 0) {
                 int chunk = Math.min(bytes, DEFAULT_BUFFER_SIZE);

@@ -1673,3 +1657,3 @@
      * <code>OutputStream</code>.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(char[])} and

@@ -1677,7 +1661,7 @@
      *
-     * @param data  the char array to write, do not modify during output,
+     * @param data the char array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1694,3 +1678,3 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(char[])} and

@@ -1698,8 +1682,8 @@
      *
-     * @param data  the char array to write, do not modify during output,
+     * @param data the char array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -1715,6 +1699,6 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link String#String(char[])} and

@@ -1722,11 +1706,10 @@
      *
-     * @param data  the char array to write, do not modify during output,
+     * @param data the char array to write, do not modify during output,
      * null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException                         if output is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     * .UnsupportedEncodingException} in version 2.2 if the encoding is not supported.
      * @since 1.1

@@ -1740,2 +1723,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1743,6 +1727,6 @@
      *
-     * @param data  the <code>CharSequence</code> to write, null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param data the <code>CharSequence</code> to write, null ignored
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.0

@@ -1759,9 +1743,9 @@
      * platform.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes()}.
      *
-     * @param data  the <code>CharSequence</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param data the <code>CharSequence</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.0

@@ -1778,13 +1762,14 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes(String)}.
      *
-     * @param data  the <code>CharSequence</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
+     * @param data the <code>CharSequence</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3
      */
-    public static void write(final CharSequence data, final OutputStream output, final Charset encoding) throws IOException {
+    public static void write(final CharSequence data, final OutputStream output, final Charset encoding)
+            throws IOException {
         if (data != null) {

@@ -1797,19 +1782,19 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes(String)}.
      *
-     * @param data  the <code>CharSequence</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param data the <code>CharSequence</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException        if output is null
+     * @throws IOException                 if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     * .UnsupportedEncodingException} in version 2.2 if the encoding is not supported.
      * @since 2.0
      */
-    public static void write(final CharSequence data, final OutputStream output, final String encoding) throws IOException {
+    public static void write(final CharSequence data, final OutputStream output, final String encoding)
+            throws IOException {
         write(data, output, Charsets.toCharset(encoding));

@@ -1819,2 +1804,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1822,6 +1808,6 @@
      *
-     * @param data  the <code>String</code> to write, null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param data the <code>String</code> to write, null ignored
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1838,9 +1824,9 @@
      * platform.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes()}.
      *
-     * @param data  the <code>String</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param data the <code>String</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1857,10 +1843,10 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes(String)}.
      *
-     * @param data  the <code>String</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
+     * @param data the <code>String</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3

@@ -1876,16 +1862,15 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes(String)}.
      *
-     * @param data  the <code>String</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param data the <code>String</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException        if output is null
+     * @throws IOException                 if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     * .UnsupportedEncodingException} in version 2.2 if the encoding is not supported.
      * @since 1.1

@@ -1899,2 +1884,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1902,6 +1888,6 @@
      *
-     * @param data  the <code>StringBuffer</code> to write, null ignored
-     * @param output  the <code>Writer</code> to write to
+     * @param data the <code>StringBuffer</code> to write, null ignored
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1921,9 +1907,9 @@
      * platform.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes()}.
      *
-     * @param data  the <code>StringBuffer</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
+     * @param data the <code>StringBuffer</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1940,16 +1926,15 @@
      * <code>OutputStream</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link String#getBytes(String)}.
      *
-     * @param data  the <code>StringBuffer</code> to write, null ignored
-     * @param output  the <code>OutputStream</code> to write to
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param data the <code>StringBuffer</code> to write, null ignored
+     * @param output the <code>OutputStream</code> to write to
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException        if output is null
+     * @throws IOException                 if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     * .UnsupportedEncodingException} in version 2.2 if the encoding is not supported.
      * @since 1.1

@@ -1958,3 +1943,4 @@
     @Deprecated
-    public static void write(final StringBuffer data, final OutputStream output, final String encoding) throws IOException {
+    public static void write(final StringBuffer data, final OutputStream output, final String encoding)
+            throws IOException {
         if (data != null) {

@@ -1966,2 +1952,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -1971,7 +1958,7 @@
      *
-     * @param lines  the lines to write, null entries produce blank lines
-     * @param lineEnding  the line separator to use, null is system default
-     * @param output  the <code>OutputStream</code> to write to, not null, not closed
+     * @param lines the lines to write, null entries produce blank lines
+     * @param lineEnding the line separator to use, null is system default
+     * @param output the <code>OutputStream</code> to write to, not null, not closed
      * @throws NullPointerException if the output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -1981,3 +1968,3 @@
     public static void writeLines(final Collection<?> lines, final String lineEnding,
-            final OutputStream output) throws IOException {
+                                  final OutputStream output) throws IOException {
         writeLines(lines, lineEnding, output, Charset.defaultCharset());

@@ -1990,12 +1977,12 @@
      *
-     * @param lines  the lines to write, null entries produce blank lines
-     * @param lineEnding  the line separator to use, null is system default
-     * @param output  the <code>OutputStream</code> to write to, not null, not closed
-     * @param encoding  the encoding to use, null means platform default
+     * @param lines the lines to write, null entries produce blank lines
+     * @param lineEnding the line separator to use, null is system default
+     * @param output the <code>OutputStream</code> to write to, not null, not closed
+     * @param encoding the encoding to use, null means platform default
      * @throws NullPointerException if the output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3
      */
-    public static void writeLines(final Collection<?> lines, String lineEnding, final OutputStream output, final Charset encoding)
-            throws IOException {
+    public static void writeLines(final Collection<?> lines, String lineEnding, final OutputStream output,
+                                  final Charset encoding) throws IOException {
         if (lines == null) {

@@ -2019,3 +2006,3 @@
      * encoding and the specified line ending.
-     * <p>
+     * <p/>
      * Character encoding names can be found at

@@ -2023,11 +2010,11 @@
      *
-     * @param lines  the lines to write, null entries produce blank lines
-     * @param lineEnding  the line separator to use, null is system default
-     * @param output  the <code>OutputStream</code> to write to, not null, not closed
-     * @param encoding  the encoding to use, null means platform default
-     * @throws NullPointerException if the output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param lines the lines to write, null entries produce blank lines
+     * @param lineEnding the line separator to use, null is system default
+     * @param output the <code>OutputStream</code> to write to, not null, not closed
+     * @param encoding the encoding to use, null means platform default
+     * @throws NullPointerException                         if the output is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1

@@ -2035,3 +2022,3 @@
     public static void writeLines(final Collection<?> lines, final String lineEnding,
-            final OutputStream output, final String encoding) throws IOException {
+                                  final OutputStream output, final String encoding) throws IOException {
         writeLines(lines, lineEnding, output, Charsets.toCharset(encoding));

@@ -2043,7 +2030,7 @@
      *
-     * @param lines  the lines to write, null entries produce blank lines
-     * @param lineEnding  the line separator to use, null is system default
-     * @param writer  the <code>Writer</code> to write to, not null, not closed
+     * @param lines the lines to write, null entries produce blank lines
+     * @param lineEnding the line separator to use, null is system default
+     * @param writer the <code>Writer</code> to write to, not null, not closed
      * @throws NullPointerException if the input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2051,3 +2038,3 @@
     public static void writeLines(final Collection<?> lines, String lineEnding,
-            final Writer writer) throws IOException {
+                                  final Writer writer) throws IOException {
         if (lines == null) {

@@ -2068,2 +2055,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -2071,6 +2059,6 @@
      * <code>OutputStream</code>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
+     * <p/>
      * Large streams (over 2GB) will return a bytes copied value of

@@ -2080,7 +2068,7 @@
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @return the number of bytes copied, or -1 if &gt; Integer.MAX_VALUE
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2098,19 +2086,16 @@
      * given size.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.
-     * <p>
-     * @param input
-     *            the <code>InputStream</code> to read from
-     * @param output
-     *            the <code>OutputStream</code> to write to
-     * @param bufferSize
-     *            the bufferSize used to copy from the input to the output
+     * <p/>
+     *
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
+     * @param bufferSize the bufferSize used to copy from the input to the output
      * @return the number of bytes copied
-     * @throws NullPointerException
-     *             if the input or output is null
-     * @throws IOException
-     *             if an I/O error occurs
+     * @throws NullPointerException if the input or output is null
+     * @throws IOException          if an I/O error occurs
      * @since 2.5
      */
-    public static long copy(final InputStream input, final OutputStream output, final int bufferSize) throws IOException {
+    public static long copy(final InputStream input, final OutputStream output, final int bufferSize)
+            throws IOException {
         return copyLarge(input, output, new byte[bufferSize]);

@@ -2121,13 +2106,13 @@
      * <code>OutputStream</code>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
+     * <p/>
      * The buffer size is given by {@link #DEFAULT_BUFFER_SIZE}.
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @return the number of bytes copied
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.3

@@ -2142,8 +2127,9 @@
      * <code>OutputStream</code>.
-     * <p>
+     * <p/>
      * This method uses the provided buffer, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * <p/>
+     *
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @param buffer the buffer to use for the copy

@@ -2151,3 +2137,3 @@
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2

@@ -2157,3 +2143,3 @@
         long count = 0;
-        int n = 0;
+        int n;
         while (EOF != (n = input.read(buffer))) {

@@ -2179,6 +2165,6 @@
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @param inputOffset : number of bytes to skip from input before copying
-     *         -ve values are ignored
+     * -ve values are ignored
      * @param length : number of bytes to copy. -ve means all

@@ -2186,7 +2172,7 @@
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2
      */
-    public static long copyLarge(final InputStream input, final OutputStream output, final long inputOffset, final long length)
-            throws IOException {
+    public static long copyLarge(final InputStream input, final OutputStream output, final long inputOffset,
+                                 final long length) throws IOException {
         return copyLarge(input, output, inputOffset, length, new byte[DEFAULT_BUFFER_SIZE]);

@@ -2207,12 +2193,11 @@
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @param inputOffset : number of bytes to skip from input before copying
-     *         -ve values are ignored
+     * -ve values are ignored
      * @param length : number of bytes to copy. -ve means all
      * @param buffer the buffer to use for the copy
-     *
      * @return the number of bytes copied
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2

@@ -2220,3 +2205,3 @@
     public static long copyLarge(final InputStream input, final OutputStream output,
-            final long inputOffset, final long length, final byte[] buffer)  throws IOException {
+                                 final long inputOffset, final long length, final byte[] buffer) throws IOException {
         if (inputOffset > 0) {

@@ -2248,12 +2233,12 @@
      * <code>Writer</code> using the default character encoding of the platform.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
+     * <p/>
      * This method uses {@link InputStreamReader}.
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2270,16 +2255,17 @@
      * <code>Writer</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
+     * <p/>
      * This method uses {@link InputStreamReader}.
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>Writer</code> to write to
-     * @param inputEncoding  the encoding to use for the input stream, null means platform default
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>Writer</code> to write to
+     * @param inputEncoding the encoding to use for the input stream, null means platform default
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3
      */
-    public static void copy(final InputStream input, final Writer output, final Charset inputEncoding) throws IOException {
+    public static void copy(final InputStream input, final Writer output, final Charset inputEncoding)
+            throws IOException {
         final InputStreamReader in = new InputStreamReader(input, Charsets.toCharset(inputEncoding));

@@ -2291,22 +2277,23 @@
      * <code>Writer</code> using the specified character encoding.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * This method uses {@link InputStreamReader}.
      *
-     * @param input  the <code>InputStream</code> to read from
-     * @param output  the <code>Writer</code> to write to
-     * @param inputEncoding  the encoding to use for the InputStream, null means platform default
-     * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param input the <code>InputStream</code> to read from
+     * @param output the <code>Writer</code> to write to
+     * @param inputEncoding the encoding to use for the InputStream, null means platform default
+     * @throws NullPointerException                         if the input or output is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1
      */
-    public static void copy(final InputStream input, final Writer output, final String inputEncoding) throws IOException {
+    public static void copy(final InputStream input, final Writer output, final String inputEncoding)
+            throws IOException {
         copy(input, output, Charsets.toCharset(inputEncoding));

@@ -2316,8 +2303,9 @@
     //-----------------------------------------------------------------------
+
     /**
      * Copies chars from a <code>Reader</code> to a <code>Writer</code>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      * Large streams (over 2GB) will return a chars copied value of

@@ -2327,7 +2315,7 @@
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @return the number of characters copied, or -1 if &gt; Integer.MAX_VALUE
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2344,13 +2332,13 @@
      * Copies chars from a large (over 2GB) <code>Reader</code> to a <code>Writer</code>.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      * The buffer size is given by {@link #DEFAULT_BUFFER_SIZE}.
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @return the number of characters copied
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.3

@@ -2363,9 +2351,9 @@
      * Copies chars from a large (over 2GB) <code>Reader</code> to a <code>Writer</code>.
-     * <p>
+     * <p/>
      * This method uses the provided buffer, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @param buffer the buffer to be used for the copy

@@ -2373,8 +2361,8 @@
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2
      */
-    public static long copyLarge(final Reader input, final Writer output, final char [] buffer) throws IOException {
+    public static long copyLarge(final Reader input, final Writer output, final char[] buffer) throws IOException {
         long count = 0;
-        int n = 0;
+        int n;
         while (EOF != (n = input.read(buffer))) {

@@ -2389,12 +2377,12 @@
      * <code>OutputStream</code>, optionally skipping input chars.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      * The buffer size is given by {@link #DEFAULT_BUFFER_SIZE}.
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @param inputOffset : number of chars to skip from input before copying
-     *         -ve values are ignored
+     * -ve values are ignored
      * @param length : number of chars to copy. -ve means all

@@ -2402,3 +2390,3 @@
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2

@@ -2407,3 +2395,3 @@
             throws IOException {
-        return  copyLarge(input, output, inputOffset, length, new char[DEFAULT_BUFFER_SIZE]);
+        return copyLarge(input, output, inputOffset, length, new char[DEFAULT_BUFFER_SIZE]);
     }

@@ -2413,11 +2401,11 @@
      * <code>OutputStream</code>, optionally skipping input chars.
-     * <p>
+     * <p/>
      * This method uses the provided buffer, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>Writer</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>Writer</code> to write to
      * @param inputOffset : number of chars to skip from input before copying
-     *         -ve values are ignored
+     * -ve values are ignored
      * @param length : number of chars to copy. -ve means all

@@ -2426,6 +2414,7 @@
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2
      */
-    public static long copyLarge(final Reader input, final Writer output, final long inputOffset, final long length, final char [] buffer)
+    public static long copyLarge(final Reader input, final Writer output, final long inputOffset, final long length,
+                                 final char[] buffer)
             throws IOException {

@@ -2458,15 +2447,15 @@
      * platform, and calling flush.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      * Due to the implementation of OutputStreamWriter, this method performs a
      * flush.
-     * <p>
+     * <p/>
      * This method uses {@link OutputStreamWriter}.
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>OutputStream</code> to write to
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2496,10 +2485,11 @@
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
-     * @param outputEncoding  the encoding to use for the OutputStream, null means platform default
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>OutputStream</code> to write to
+     * @param outputEncoding the encoding to use for the OutputStream, null means platform default
      * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.3
      */
-    public static void copy(final Reader input, final OutputStream output, final Charset outputEncoding) throws IOException {
+    public static void copy(final Reader input, final OutputStream output, final Charset outputEncoding)
+            throws IOException {
         final OutputStreamWriter out = new OutputStreamWriter(output, Charsets.toCharset(outputEncoding));

@@ -2515,25 +2505,26 @@
      * calling flush.
-     * <p>
+     * <p/>
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
-     * <p>
+     * <p/>
      * Character encoding names can be found at
      * <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
-     * <p>
+     * <p/>
      * Due to the implementation of OutputStreamWriter, this method performs a
      * flush.
-     * <p>
+     * <p/>
      * This method uses {@link OutputStreamWriter}.
      *
-     * @param input  the <code>Reader</code> to read from
-     * @param output  the <code>OutputStream</code> to write to
-     * @param outputEncoding  the encoding to use for the OutputStream, null means platform default
-     * @throws NullPointerException if the input or output is null
-     * @throws IOException if an I/O error occurs
-     * @throws UnsupportedCharsetException
-     *             thrown instead of {@link UnsupportedEncodingException} in version 2.2 if the encoding is not
-     *             supported.
+     * @param input the <code>Reader</code> to read from
+     * @param output the <code>OutputStream</code> to write to
+     * @param outputEncoding the encoding to use for the OutputStream, null means platform default
+     * @throws NullPointerException                         if the input or output is null
+     * @throws IOException                                  if an I/O error occurs
+     * @throws java.nio.charset.UnsupportedCharsetException thrown instead of {@link java.io
+     *                                                      .UnsupportedEncodingException} in version 2.2 if the
+     *                                                      encoding is not supported.
      * @since 1.1
      */
-    public static void copy(final Reader input, final OutputStream output, final String outputEncoding) throws IOException {
+    public static void copy(final Reader input, final OutputStream output, final String outputEncoding)
+            throws IOException {
         copy(input, output, Charsets.toCharset(outputEncoding));

@@ -2543,2 +2534,3 @@
     //-----------------------------------------------------------------------
+
     /**

@@ -2546,3 +2538,3 @@
      * not.
-     * <p>
+     * <p/>
      * This method buffers the input internally using

@@ -2550,4 +2542,4 @@
      *
-     * @param input1  the first stream
-     * @param input2  the second stream
+     * @param input1 the first stream
+     * @param input2 the second stream
      * @return true if the content of the streams are equal or they both don't

@@ -2555,3 +2547,3 @@
      * @throws NullPointerException if either input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      */

@@ -2585,3 +2577,3 @@
      * not.
-     * <p>
+     * <p/>
      * This method buffers the input internally using

@@ -2589,4 +2581,4 @@
      *
-     * @param input1  the first reader
-     * @param input2  the second reader
+     * @param input1 the first reader
+     * @param input2 the second reader
      * @return true if the content of the readers are equal or they both don't

@@ -2594,3 +2586,3 @@
      * @throws NullPointerException if either input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 1.1

@@ -2622,3 +2614,3 @@
      * not, ignoring EOL characters.
-     * <p>
+     * <p/>
      * This method buffers the input internally using

@@ -2626,7 +2618,7 @@
      *
-     * @param input1  the first reader
-     * @param input2  the second reader
+     * @param input1 the first reader
+     * @param input2 the second reader
      * @return true if the content of the readers are equal (ignoring EOL differences),  false otherwise
      * @throws NullPointerException if either input is null
-     * @throws IOException if an I/O error occurs
+     * @throws IOException          if an I/O error occurs
      * @since 2.2

@@ -2662,3 +2654,2 @@
      *
-     *
      * @param input byte stream to skip

@@ -2666,8 +2657,6 @@
      * @return number of bytes actually skipped.
-     *
+     * @throws IOException              if there is a problem reading the file
+     * @throws IllegalArgumentException if toSkip is negative
      * @see InputStream#skip(long)
      * @see <a href="https://issues.apache.org/jira/browse/IO-203">IO-203 - Add skipFully() method for InputStreams</a>
-     *
-     * @throws IOException if there is a problem reading the file
-     * @throws IllegalArgumentException if toSkip is negative
      * @since 2.0

@@ -2706,4 +2695,3 @@
      * @return number of bytes actually skipped.
-     *
-     * @throws IOException if there is a problem reading the ReadableByteChannel
+     * @throws IOException              if there is a problem reading the ReadableByteChannel
      * @throws IllegalArgumentException if toSkip is negative

@@ -2744,8 +2732,6 @@
      * @return number of characters actually skipped.
-     *
+     * @throws IOException              if there is a problem reading the file
+     * @throws IllegalArgumentException if toSkip is negative
      * @see Reader#skip(long)
      * @see <a href="https://issues.apache.org/jira/browse/IO-203">IO-203 - Add skipFully() method for InputStreams</a>
-     *
-     * @throws IOException if there is a problem reading the file
-     * @throws IllegalArgumentException if toSkip is negative
      * @since 2.0

@@ -2789,7 +2775,6 @@
      * @param toSkip the number of bytes to skip
-     * @see InputStream#skip(long)
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if toSkip is negative
-     * @throws EOFException if the number of bytes skipped was incorrect
+     * @throws EOFException             if the number of bytes skipped was incorrect
+     * @see InputStream#skip(long)
      * @since 2.0

@@ -2811,6 +2796,5 @@
      * @param toSkip the number of bytes to skip
-     *
-     * @throws IOException if there is a problem reading the ReadableByteChannel
+     * @throws IOException              if there is a problem reading the ReadableByteChannel
      * @throws IllegalArgumentException if toSkip is negative
-     * @throws EOFException if the number of bytes skipped was incorrect
+     * @throws EOFException             if the number of bytes skipped was incorrect
      * @since 2.5

@@ -2840,7 +2824,6 @@
      * @param toSkip the number of characters to skip
-     * @see Reader#skip(long)
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if toSkip is negative
-     * @throws EOFException if the number of characters skipped was incorrect
+     * @throws EOFException             if the number of characters skipped was incorrect
+     * @see Reader#skip(long)
      * @since 2.0

@@ -2869,3 +2852,4 @@
      */
-    public static int read(final Reader input, final char[] buffer, final int offset, final int length) throws IOException {
+    public static int read(final Reader input, final char[] buffer, final int offset, final int length)
+            throws IOException {
         if (length < 0) {

@@ -2915,3 +2899,4 @@
      */
-    public static int read(final InputStream input, final byte[] buffer, final int offset, final int length) throws IOException {
+    public static int read(final InputStream input, final byte[] buffer, final int offset, final int length)
+            throws IOException {
         if (length < 0) {

@@ -2949,3 +2934,3 @@
      * Reads bytes from a ReadableByteChannel.
-     * <p>
+     * <p/>
      * This implementation guarantees that it will read as many bytes

@@ -2973,3 +2958,3 @@
      * Reads the requested number of characters or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link Reader#read(char[], int, int)} may

@@ -2981,9 +2966,9 @@
      * @param length length to read, must be &gt;= 0
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
-     * @throws EOFException if the number of characters read was incorrect
+     * @throws EOFException             if the number of characters read was incorrect
      * @since 2.2
      */
-    public static void readFully(final Reader input, final char[] buffer, final int offset, final int length) throws IOException {
+    public static void readFully(final Reader input, final char[] buffer, final int offset, final int length)
+            throws IOException {
         final int actual = read(input, buffer, offset, length);

@@ -2996,3 +2981,3 @@
      * Reads the requested number of characters or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link Reader#read(char[], int, int)} may

@@ -3002,6 +2987,5 @@
      * @param buffer destination
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
-     * @throws EOFException if the number of characters read was incorrect
+     * @throws EOFException             if the number of characters read was incorrect
      * @since 2.2

@@ -3014,3 +2998,3 @@
      * Reads the requested number of bytes or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link InputStream#read(byte[], int, int)} may

@@ -3022,9 +3006,9 @@
      * @param length length to read, must be &gt;= 0
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
-     * @throws EOFException if the number of bytes read was incorrect
+     * @throws EOFException             if the number of bytes read was incorrect
      * @since 2.2
      */
-    public static void readFully(final InputStream input, final byte[] buffer, final int offset, final int length) throws IOException {
+    public static void readFully(final InputStream input, final byte[] buffer, final int offset, final int length)
+            throws IOException {
         final int actual = read(input, buffer, offset, length);

@@ -3037,3 +3021,3 @@
      * Reads the requested number of bytes or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link InputStream#read(byte[], int, int)} may

@@ -3043,6 +3027,5 @@
      * @param buffer destination
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
-     * @throws EOFException if the number of bytes read was incorrect
+     * @throws EOFException             if the number of bytes read was incorrect
      * @since 2.2

@@ -3055,3 +3038,3 @@
      * Reads the requested number of bytes or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link InputStream#read(byte[], int, int)} may

@@ -3061,9 +3044,6 @@
      * @param length length to read, must be &gt;= 0
-     *
      * @return the bytes read from input
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException              if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
-     * @throws EOFException if the number of bytes read was incorrect
-     *
+     * @throws EOFException             if the number of bytes read was incorrect
      * @since 2.5

@@ -3078,3 +3058,3 @@
      * Reads the requested number of bytes or fail if there are not enough left.
-     * <p>
+     * <p/>
      * This allows for the possibility that {@link ReadableByteChannel#read(ByteBuffer)} may

@@ -3084,4 +3064,3 @@
      * @param buffer byte buffer destination
-     *
-     * @throws IOException if there is a problem reading the file
+     * @throws IOException  if there is a problem reading the file
      * @throws EOFException if the number of bytes read was incorrect

