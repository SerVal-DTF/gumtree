Previous File: OUTPUT/commons-io/prevFiles/prev_1bff1dsrc#java#org#apache#commons#io#FilenameUtils.java
Revised File: OUTPUT/commons-io/revFiles/1bff1dsrc#java#org#apache#commons#io#FilenameUtils.java
DiffEntry: @@ -49,13 +49,16 @@
  * <pre>
- * Windows style:
+ * Windows:
  * a\b\c.txt           --> ""          --> relative
- * \a\b\c.txt          --> "\"         --> drive relative
+ * \a\b\c.txt          --> "\"         --> current drive absolute
+ * C:a\b\c.txt         --> "C:"        --> drive relative
  * C:\a\b\c.txt        --> "C:\"       --> absolute
  * \\server\a\b\c.txt  --> "\\server\" --> UNC
- * 
- * Unix style:
+ *
+ * Unix:
  * a/b/c.txt           --> ""          --> relative
  * /a/b/c.txt          --> "/"         --> absolute
- * ~/a/b/c.txt         --> "~/"        --> current user relative
- * ~user/a/b/c.txt     --> "~user/"    --> named user relative
+ * ~/a/b/c.txt         --> "~/"        --> current user absolute
+ * ~                   --> "~"         --> current user root (no path)
+ * ~user/a/b/c.txt     --> "~user/"    --> named user absolute
+ * ~user               --> "~user"     --> named user root (no path)
  * </pre>

@@ -356,3 +359,3 @@
      * This method will handle a file in either Unix or Windows format.
-     * The prefix includes the first slash in the full filename.
+     * The prefix includes the first slash in the full filename if present.
      * <pre>

@@ -360,3 +363,3 @@
      * a\b\c.txt           --> ""          --> relative
-     * \a\b\c.txt          --> "\"         --> drive absolute
+     * \a\b\c.txt          --> "\"         --> current drive absolute
      * C:a\b\c.txt         --> "C:"        --> drive relative

@@ -368,4 +371,6 @@
      * /a/b/c.txt          --> "/"         --> absolute
-     * ~/a/b/c.txt         --> "~/"        --> current user relative
-     * ~user/a/b/c.txt     --> "~user/"    --> named user relative
+     * ~/a/b/c.txt         --> "~/"        --> current user absolute
+     * ~                   --> "~"         --> current user root (no path)
+     * ~user/a/b/c.txt     --> "~user/"    --> named user absolute
+     * ~user               --> "~user"     --> named user root (no path)
      * </pre>

@@ -374,3 +379,3 @@
      * ie. both Unix and Windows prefixes are matched regardless.
-     * 
+     *
      * @param filename  the filename to find the prefix in, null returns -1

@@ -392,3 +397,3 @@
             if (ch0 == '~') {
-                return -1;
+                return 1;
             }

@@ -400,3 +405,3 @@
                 if (posUnix == -1 && posWin == -1) {
-                    return -1;
+                    return len;
                 }

@@ -484,3 +489,3 @@
      * a\b\c.txt           --> ""          --> relative
-     * \a\b\c.txt          --> "\"         --> drive absolute
+     * \a\b\c.txt          --> "\"         --> current drive absolute
      * C:a\b\c.txt         --> "C:"        --> drive relative

@@ -488,3 +493,3 @@
      * \\server\a\b\c.txt  --> "\\server\" --> UNC
-     * 
+     *
      * Unix:

@@ -492,4 +497,6 @@
      * /a/b/c.txt          --> "/"         --> absolute
-     * ~/a/b/c.txt         --> "~/"        --> current user relative
-     * ~user/a/b/c.txt     --> "~user/"    --> named user relative
+     * ~/a/b/c.txt         --> "~/"        --> current user absolute
+     * ~                   --> "~"         --> current user root (no path)
+     * ~user/a/b/c.txt     --> "~user/"    --> named user absolute
+     * ~user               --> "~user"     --> named user root (no path)
      * </pre>

@@ -540,2 +547,5 @@
         }
+        if (prefix == filename.length()) {
+            return "";
+        }
         int index = indexOfLastSeparator(filename);

@@ -575,2 +585,5 @@
         }
+        if (prefix == filename.length()) {
+            return filename;
+        }
         int index = indexOfLastSeparator(filename);

