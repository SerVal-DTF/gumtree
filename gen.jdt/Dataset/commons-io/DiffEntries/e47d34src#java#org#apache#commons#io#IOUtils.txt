Previous File: OUTPUT/commons-io/prevFiles/prev_e47d34src#java#org#apache#commons#io#IOUtils.java
Revised File: OUTPUT/commons-io/revFiles/e47d34src#java#org#apache#commons#io#IOUtils.java
DiffEntry: @@ -44,15 +44,17 @@
  * The byte-to-char methods and char-to-byte methods involve a conversion step.
- * Two methods are provided in each case, one that uses the platform default encoding
- * and the other which allows you to specify an encoding. You are encouraged to always
- * specify an encoding because relying on the platform default can lead to unexpected
- * results, for example when moving from development to production.
+ * Two methods are provided in each case, one that uses the platform default
+ * encoding and the other which allows you to specify an encoding. You are
+ * encouraged to always specify an encoding because relying on the platform
+ * default can lead to unexpected results, for example when moving from
+ * development to production.
  * <p>
  * All the methods in this class that read a stream are buffered internally.
- * This means that there is no cause to use a <code>BufferedInputStream</code> or
- * <code>BufferedReader</code>. The default buffer size of 4K has been show to be
- * efficient in tests.
+ * This means that there is no cause to use a <code>BufferedInputStream</code>
+ * or <code>BufferedReader</code>. The default buffer size of 4K has been show
+ * to be efficient in tests.
  * <p>
- * Wherever possible, the methods in this class do <em>not</em> flush or close the stream.
- * This is to avoid making non-portable assumptions about the streams' origin and further use.
- * Thus the caller is still responsible for closing streams after use.
+ * Wherever possible, the methods in this class do <em>not</em> flush or close
+ * the stream. This is to avoid making non-portable assumptions about the
+ * streams' origin and further use. Thus the caller is still responsible for
+ * closing streams after use.
  * <p>

@@ -65,7 +67,7 @@
  * @author Gareth Davis
- * @version CVS $Revision: 1.21 $ $Date: 2004/10/24 02:09:40 $
+ * @version CVS $Revision: 1.22 $ $Date: 2004/10/24 04:20:07 $
  */
 public class IOUtils {
-    // NOTE: This class is focussed on InputStream, OutputStream, Reader and Writer
-    // Each method should take at least one of these as a parameter.
+    // NOTE: This class is focussed on InputStream, OutputStream, Reader and
+    // Writer. Each method should take at least one of these as a parameter.
     // NOTE: This class should not depend on any other classes

@@ -210,3 +212,4 @@
      */
-    public static byte[] toByteArray(Reader input, String encoding) throws IOException {
+    public static byte[] toByteArray(Reader input, String encoding)
+            throws IOException {
         ByteArrayOutputStream output = new ByteArrayOutputStream();

@@ -268,3 +271,4 @@
      */
-    public static char[] toCharArray(InputStream is, String encoding) throws IOException {
+    public static char[] toCharArray(InputStream is, String encoding)
+            throws IOException {
         CharArrayWriter output = new CharArrayWriter();

@@ -327,3 +331,4 @@
      */
-    public static String toString(InputStream input, String encoding) throws IOException {
+    public static String toString(InputStream input, String encoding)
+            throws IOException {
         StringWriter sw = new StringWriter();

@@ -378,3 +383,4 @@
      */
-    public static String toString(byte[] input, String encoding) throws IOException {
+    public static String toString(byte[] input, String encoding)
+            throws IOException {
         if (encoding == null) {

@@ -391,3 +397,4 @@
      * 
-     * @param data  the byte array to write, do not modify during output, null ignored
+     * @param data  the byte array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>OutputStream</code> to write to

@@ -397,3 +404,4 @@
      */
-    public static void write(byte[] data, OutputStream output) throws IOException {
+    public static void write(byte[] data, OutputStream output)
+            throws IOException {
         if (data != null) {

@@ -409,3 +417,4 @@
      * 
-     * @param data  the byte array to write, do not modify during output, null ignored
+     * @param data  the byte array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>Writer</code> to write to

@@ -430,3 +439,4 @@
      * 
-     * @param data  the byte array to write, do not modify during output, null ignored
+     * @param data  the byte array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>Writer</code> to write to

@@ -437,3 +447,4 @@
      */
-    public static void write(byte[] data, Writer output, String encoding) throws IOException {
+    public static void write(byte[] data, Writer output, String encoding)
+            throws IOException {
         if (data != null) {

@@ -453,3 +464,4 @@
      * 
-     * @param data  the char array to write, do not modify during output, null ignored
+     * @param data  the char array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>Writer</code> to write to

@@ -466,7 +478,10 @@
     /**
-     * Writes chars from a <code>char[]</code> to bytes on an <code>OutputStream</code>.
+     * Writes chars from a <code>char[]</code> to bytes on an
+     * <code>OutputStream</code>.
      * <p>
-     * This method uses {@link String#String(char[])} and {@link String#getBytes()}.
+     * This method uses {@link String#String(char[])} and
+     * {@link String#getBytes()}.
      * 
-     * @param data  the char array to write, do not modify during output, null ignored
+     * @param data  the char array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>OutputStream</code> to write to

@@ -476,3 +491,4 @@
      */
-    public static void write(char[] data, OutputStream output) throws IOException {
+    public static void write(char[] data, OutputStream output)
+            throws IOException {
         if (data != null) {

@@ -483,4 +499,4 @@
     /**
-     * Writes chars from a <code>char[]</code> to bytes on an <code>OutputStream</code>
-     * using the specified character encoding.
+     * Writes chars from a <code>char[]</code> to bytes on an
+     * <code>OutputStream</code> using the specified character encoding.
      * <p>

@@ -489,5 +505,7 @@
      * <p>
-     * This method uses {@link String#String(char[])} and {@link String#getBytes(String)}
+     * This method uses {@link String#String(char[])} and
+     * {@link String#getBytes(String)}.
      * 
-     * @param data  the char array to write, do not modify during output, null ignored
+     * @param data  the char array to write, do not modify during output,
+     * null ignored
      * @param output  the <code>OutputStream</code> to write to

@@ -498,3 +516,4 @@
      */
-    public static void write(char[] data, OutputStream output, String encoding) throws IOException {
+    public static void write(char[] data, OutputStream output, String encoding)
+            throws IOException {
         if (data != null) {

@@ -526,4 +545,5 @@
     /**
-     * Writes chars from a <code>String</code> to bytes on an <code>OutputStream</code>
-     * using the default character encoding of the platform.
+     * Writes chars from a <code>String</code> to bytes on an
+     * <code>OutputStream</code> using the default character encoding of the
+     * platform.
      * <p>

@@ -537,3 +557,4 @@
      */
-    public static void write(String data, OutputStream output) throws IOException {
+    public static void write(String data, OutputStream output)
+            throws IOException {
         if (data != null) {

@@ -544,4 +565,4 @@
     /**
-     * Writes chars from a <code>String</code> to bytes on an <code>OutputStream</code>
-     * using the specified character encoding.
+     * Writes chars from a <code>String</code> to bytes on an
+     * <code>OutputStream</code> using the specified character encoding.
      * <p>

@@ -559,3 +580,4 @@
      */
-    public static void write(String data, OutputStream output, String encoding) throws IOException {
+    public static void write(String data, OutputStream output, String encoding)
+            throws IOException {
         if (data != null) {

@@ -580,3 +602,4 @@
      */
-    public static void write(StringBuffer data, Writer output) throws IOException {
+    public static void write(StringBuffer data, Writer output)
+            throws IOException {
         if (data != null) {

@@ -587,4 +610,5 @@
     /**
-     * Writes chars from a <code>StringBuffer</code> to bytes on an <code>OutputStream</code>
-     * using the default character encoding of the platform.
+     * Writes chars from a <code>StringBuffer</code> to bytes on an
+     * <code>OutputStream</code> using the default character encoding of the
+     * platform.
      * <p>

@@ -598,3 +622,4 @@
      */
-    public static void write(StringBuffer data, OutputStream output) throws IOException {
+    public static void write(StringBuffer data, OutputStream output)
+            throws IOException {
         if (data != null) {

@@ -605,4 +630,4 @@
     /**
-     * Writes chars from a <code>StringBuffer</code> to bytes on an <code>OutputStream</code>
-     * using the specified character encoding.
+     * Writes chars from a <code>StringBuffer</code> to bytes on an
+     * <code>OutputStream</code> using the specified character encoding.
      * <p>

@@ -620,3 +645,4 @@
      */
-    public static void write(StringBuffer data, OutputStream output, String encoding) throws IOException {
+    public static void write(StringBuffer data, OutputStream output,
+            String encoding) throws IOException {
         if (data != null) {

@@ -633,3 +659,4 @@
     /**
-     * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
+     * Copy bytes from an <code>InputStream</code> to an
+     * <code>OutputStream</code>.
      * <p>

@@ -645,3 +672,4 @@
      */
-    public static int copy(InputStream input, OutputStream output) throws IOException {
+    public static int copy(InputStream input, OutputStream output)
+            throws IOException {
         byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];

@@ -657,4 +685,4 @@
     /**
-     * Copy bytes from an <code>InputStream</code> to chars on a <code>Writer</code>
-     * using the default character encoding of the platform.
+     * Copy bytes from an <code>InputStream</code> to chars on a
+     * <code>Writer</code> using the default character encoding of the platform.
      * <p>

@@ -664,3 +692,3 @@
      * This method uses {@link InputStreamReader}.
-     * 
+     *
      * @param input  the <code>InputStream</code> to read from

@@ -671,3 +699,4 @@
      */
-    public static void copy(InputStream input, Writer output) throws IOException {
+    public static void copy(InputStream input, Writer output)
+            throws IOException {
         InputStreamReader in = new InputStreamReader(input);

@@ -677,4 +706,4 @@
     /**
-     * Copy bytes from an <code>InputStream</code> to chars on a <code>Writer</code>
-     * using the specified character encoding.
+     * Copy bytes from an <code>InputStream</code> to chars on a
+     * <code>Writer</code> using the specified character encoding.
      * <p>

@@ -687,3 +716,3 @@
      * This method uses {@link InputStreamReader}.
-     * 
+     *
      * @param input  the <code>InputStream</code> to read from

@@ -695,3 +724,4 @@
      */
-    public static void copy(InputStream input, Writer output, String encoding) throws IOException {
+    public static void copy(InputStream input, Writer output, String encoding)
+            throws IOException {
         if (encoding == null) {

@@ -711,3 +741,3 @@
      * <code>BufferedReader</code>.
-     * 
+     *
      * @param input  the <code>Reader</code> to read from

@@ -731,4 +761,5 @@
     /**
-     * Copy chars from a <code>Reader</code> to bytes on an <code>OutputStream</code>
-     * using the default character encoding of the platform, and calling flush.
+     * Copy chars from a <code>Reader</code> to bytes on an
+     * <code>OutputStream</code> using the default character encoding of the
+     * platform, and calling flush.
      * <p>

@@ -737,6 +768,7 @@
      * <p>
-     * Due to the implementation of OutputStreamWriter, this method performs a flush.
+     * Due to the implementation of OutputStreamWriter, this method performs a
+     * flush.
      * <p>
      * This method uses {@link OutputStreamWriter}.
-     * 
+     *
      * @param input  the <code>Reader</code> to read from

@@ -747,6 +779,8 @@
      */
-    public static void copy(Reader input, OutputStream output) throws IOException {
+    public static void copy(Reader input, OutputStream output)
+            throws IOException {
         OutputStreamWriter out = new OutputStreamWriter(output);
         copy(input, out);
-        // XXX Unless anyone is planning on rewriting OutputStreamWriter, we have to flush here.
+        // XXX Unless anyone is planning on rewriting OutputStreamWriter, we
+        // have to flush here.
         out.flush();

@@ -755,4 +789,5 @@
     /**
-     * Copy chars from a <code>Reader</code> to bytes on an <code>OutputStream</code>
-     * using the specified character encoding, and calling flush.
+     * Copy chars from a <code>Reader</code> to bytes on an
+     * <code>OutputStream</code> using the specified character encoding, and
+     * calling flush.
      * <p>

@@ -764,6 +799,7 @@
      * <p>
-     * Due to the implementation of OutputStreamWriter, this method performs a flush.
+     * Due to the implementation of OutputStreamWriter, this method performs a
+     * flush.
      * <p>
      * This method uses {@link OutputStreamWriter}.
-     * 
+     *
      * @param input  the <code>Reader</code> to read from

@@ -775,3 +811,4 @@
      */
-    public static void copy(Reader input, OutputStream output, String encoding) throws IOException {
+    public static void copy(Reader input, OutputStream output, String encoding)
+            throws IOException {
         if (encoding == null) {

@@ -781,3 +818,4 @@
             copy(input, out);
-            // XXX Unless anyone is planning on rewriting OutputStreamWriter, we have to flush here.
+            // XXX Unless anyone is planning on rewriting OutputStreamWriter,
+            // we have to flush here.
             out.flush();

@@ -789,6 +827,7 @@
     /**
-     * Compare the contents of two Streams to determine if they are equal or not.
+     * Compare the contents of two Streams to determine if they are equal or
+     * not.
      * <p>
-     * This method buffers the input internally using <code>BufferedInputStream</code>
-     * if they are not already buffered.
+     * This method buffers the input internally using
+     * <code>BufferedInputStream</code> if they are not already buffered.
      *

@@ -796,3 +835,4 @@
      * @param input2  the second stream
-     * @return true if the content of the streams are equal or they both don't exist, false otherwise
+     * @return true if the content of the streams are equal or they both don't
+     * exist, false otherwise
      * @throws NullPointerException if either input is null

@@ -800,10 +840,11 @@
      */
-    public static boolean contentEquals(InputStream input1, InputStream input2) throws IOException {
-        if (input1 instanceof BufferedInputStream == false) {
+    public static boolean contentEquals(InputStream input1, InputStream input2)
+            throws IOException {
+        if (!(input1 instanceof BufferedInputStream)) {
             input1 = new BufferedInputStream(input1);
         }
-        if (input2 instanceof BufferedInputStream == false) {
+        if (!(input2 instanceof BufferedInputStream)) {
             input2 = new BufferedInputStream(input2);
         }
-        
+
         int ch = input1.read();

@@ -816,3 +857,3 @@
         }
-        
+
         int ch2 = input2.read();

@@ -822,6 +863,7 @@
     /**
-     * Compare the contents of two Readers to determine if they are equal or not.
+     * Compare the contents of two Readers to determine if they are equal or
+     * not.
      * <p>
-     * This method buffers the input internally using <code>BufferedReader</code>
-     * if they are not already buffered.
+     * This method buffers the input internally using
+     * <code>BufferedReader</code> if they are not already buffered.
      *

@@ -829,3 +871,4 @@
      * @param input2  the second reader
-     * @return true if the content of the readers are equal or they both don't exist, false otherwise
+     * @return true if the content of the readers are equal or they both don't
+     * exist, false otherwise
      * @throws NullPointerException if either input is null

@@ -834,10 +877,11 @@
      */
-    public static boolean contentEquals(Reader input1, Reader input2) throws IOException {
-        if (input1 instanceof BufferedReader == false) {
+    public static boolean contentEquals(Reader input1, Reader input2)
+            throws IOException {
+        if (!(input1 instanceof BufferedReader)) {
             input1 = new BufferedReader(input1);
         }
-        if (input2 instanceof BufferedReader == false) {
+        if (!(input2 instanceof BufferedReader)) {
             input2 = new BufferedReader(input2);
         }
-        
+
         int ch = input1.read();

@@ -850,3 +894,3 @@
         }
-        
+
         int ch2 = input2.read();

