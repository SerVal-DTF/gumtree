Previous File: OUTPUT/commons-io/prevFiles/prev_b04b4fsrc#main#java#org#apache#commons#io#IOUtils.java
Revised File: OUTPUT/commons-io/revFiles/b04b4fsrc#main#java#org#apache#commons#io#IOUtils.java
DiffEntry: @@ -107,2 +107,3 @@
     public static final String LINE_SEPARATOR;
+    
     static {

@@ -470,7 +471,7 @@
 
-        if(size < 0) {
+        if (size < 0) {
             throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);
         }
-        
-        if(size == 0) {
+
+        if (size == 0) {
             return new byte[0];

@@ -482,3 +483,3 @@
 
-        while(offset < size && (readed = input.read(data, offset, size - offset)) != -1) {
+        while (offset < size && (readed = input.read(data, offset, size - offset)) != -1) {
             offset += readed;

@@ -486,3 +487,3 @@
 
-        if(offset != size) {
+        if (offset != size) {
             throw new IOException("Unexpected readed size. current: " + offset + ", excepted: " + size);

@@ -1480,4 +1481,4 @@
             throws IOException {
-        if( offset > 0){
-            skipFully( input, offset);
+        if (offset > 0) {
+            skipFully(input, offset);
         }

@@ -1493,4 +1494,4 @@
         long totalRead = 0;
-        while(bytesToRead > 0 && -1 != (read=input.read(buffer, 0, bytesToRead))) {
-            output.write( buffer, 0, read);
+        while (bytesToRead > 0 && -1 != (read = input.read(buffer, 0, bytesToRead))) {
+            output.write(buffer, 0, read);
             totalRead += read;

@@ -1628,5 +1629,5 @@
     public static long copyLarge(Reader input, Writer output, final long offset, final long length)
-            throws IOException {
-        if( offset > 0){
-            skipFully( input, offset);
+ throws IOException {
+        if (offset > 0) {
+            skipFully(input, offset);
         }

@@ -1642,4 +1643,4 @@
         long totalRead = 0;
-        while(bytesToRead > 0 && -1 != (read=input.read(buffer, 0, bytesToRead))) {
-            output.write( buffer, 0, read);
+        while (bytesToRead > 0 && -1 != (read = input.read(buffer, 0, bytesToRead))) {
+            output.write(buffer, 0, read);
             totalRead += read;

@@ -1848,16 +1849,14 @@
         if (toSkip < 0) {
-            throw new IllegalArgumentException("Skip count must be non-negative, actual: "+toSkip);
+            throw new IllegalArgumentException("Skip count must be non-negative, actual: " + toSkip);
         }
         /*
-         * N.B. no need to synchronize this because:
-         * - we don't care if the buffer is created multiple times (the data is ignored)
-         * - we always use the same size buffer, so if it it is recreated it will still be OK
-         * (if the buffer size were variable, we would need to synch. to ensure some other thread
-         * did not create a smaller one)
+         * N.B. no need to synchronize this because: - we don't care if the buffer is created multiple times (the data
+         * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer
+         * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)
          */
-        if (SKIP_BYTE_BUFFER == null){
+        if (SKIP_BYTE_BUFFER == null) {
             SKIP_BYTE_BUFFER = new byte[SKIP_BUFFER_SIZE];
         }
-        long remain=toSkip;
-        while(remain > 0) {
+        long remain = toSkip;
+        while (remain > 0) {
             long n = input.read(SKIP_BYTE_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));

@@ -1868,3 +1867,3 @@
         }
-        return toSkip - remain;   
+        return toSkip - remain;
     }

@@ -1889,16 +1888,14 @@
         if (toSkip < 0) {
-            throw new IllegalArgumentException("Skip count must be non-negative, actual: "+toSkip);
+            throw new IllegalArgumentException("Skip count must be non-negative, actual: " + toSkip);
         }
         /*
-         * N.B. no need to synchronize this because:
-         * - we don't care if the buffer is created multiple times (the data is ignored)
-         * - we always use the same size buffer, so if it it is recreated it will still be OK
-         * (if the buffer size were variable, we would need to synch. to ensure some other thread
-         * did not create a smaller one)
+         * N.B. no need to synchronize this because: - we don't care if the buffer is created multiple times (the data
+         * is ignored) - we always use the same size buffer, so if it it is recreated it will still be OK (if the buffer
+         * size were variable, we would need to synch. to ensure some other thread did not create a smaller one)
          */
-        if (SKIP_CHAR_BUFFER == null){
+        if (SKIP_CHAR_BUFFER == null) {
             SKIP_CHAR_BUFFER = new char[SKIP_BUFFER_SIZE];
         }
-        long remain=toSkip;
-        while(remain > 0) {
+        long remain = toSkip;
+        while (remain > 0) {
             long n = input.read(SKIP_CHAR_BUFFER, 0, (int) Math.min(remain, SKIP_BUFFER_SIZE));

@@ -1909,3 +1906,3 @@
         }
-        return toSkip - remain;   
+        return toSkip - remain;
     }

@@ -1928,4 +1925,4 @@
     public static void skipFully(InputStream input, long toSkip) throws IOException {
-        if (toSkip < 0){
-            throw new IllegalArgumentException("Bytes to skip must not be negative: "+toSkip);
+        if (toSkip < 0) {
+            throw new IllegalArgumentException("Bytes to skip must not be negative: " + toSkip);
         }

@@ -1933,3 +1930,3 @@
         if (skipped != toSkip) {
-            throw new EOFException("Bytes to skip: "+toSkip+" actual: "+skipped);
+            throw new EOFException("Bytes to skip: " + toSkip + " actual: " + skipped);
         }

@@ -1955,3 +1952,3 @@
         if (skipped != toSkip) {
-            throw new EOFException("Chars to skip: "+toSkip+" actual: "+skipped);
+            throw new EOFException("Chars to skip: " + toSkip + " actual: " + skipped);
         }

@@ -1975,10 +1972,10 @@
     public static int read(Reader input, char[] buffer, int offset, int length) throws IOException {
-        if (length < 0){
-            throw new IllegalArgumentException("Length must not be negative: "+length);
+        if (length < 0) {
+            throw new IllegalArgumentException("Length must not be negative: " + length);
         }
         int remaining = length;
-        while ( remaining > 0 ) {
+        while (remaining > 0) {
             int location = length - remaining;
-            int count = input.read( buffer, location, remaining );
-            if ( -1 == count ) { // EOF
+            int count = input.read(buffer, location, remaining);
+            if (-1 == count) { // EOF
                 break;

@@ -2020,10 +2017,10 @@
     public static int read(InputStream input, byte[] buffer, int offset, int length) throws IOException {
-        if (length < 0){
-            throw new IllegalArgumentException("Length must not be negative: "+length);
+        if (length < 0) {
+            throw new IllegalArgumentException("Length must not be negative: " + length);
         }
         int remaining = length;
-        while ( remaining > 0 ) {
+        while (remaining > 0) {
             int location = length - remaining;
-            int count = input.read( buffer, location, remaining );
-            if ( -1 == count ) { // EOF
+            int count = input.read(buffer, location, remaining);
+            if (-1 == count) { // EOF
                 break;

@@ -2068,4 +2065,4 @@
         int actual = read(input, buffer, offset, length);
-        if (actual != length){
-            throw new EOFException("Length to read: "+length+" actual: "+actual);            
+        if (actual != length) {
+            throw new EOFException("Length to read: " + length + " actual: " + actual);
         }

@@ -2109,4 +2106,4 @@
         int actual = read(input, buffer, offset, length);
-        if (actual != length){
-            throw new EOFException("Length to read: "+length+" actual: "+actual);            
+        if (actual != length) {
+            throw new EOFException("Length to read: " + length + " actual: " + actual);
         }

